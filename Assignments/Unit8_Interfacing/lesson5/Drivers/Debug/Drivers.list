
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e08  08000e08  00010e10  2**0
                  CONTENTS
  4 .ARM          00000000  08000e08  08000e08  00010e10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e08  08000e10  00010e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e0c  08000e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000e10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000e10  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e10  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051d1  00000000  00000000  00010e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c99  00000000  00000000  0001600a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e30  00000000  00000000  00016ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  00017ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00017d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f68  00000000  00000000  00017ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002d65  00000000  00000000  00018e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a9f4  00000000  00000000  0001bbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000265b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000074c  00000000  00000000  0002662c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd8 	.word	0x08000dd8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000dd8 	.word	0x08000dd8

08000170 <clock_init>:
#include "../stm32_F103C6_drivers/inc/stm32f103c6_SPI_driver.h"


	uint16_t ch;

void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPI_IRQ_CallBack>:

void SPI_IRQ_CallBack(struct S_IRQ_SRC irq_src){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]

	if(irq_src.RXNE){
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPI_IRQ_CallBack+0x2e>
		ch = 0x0f;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPI_IRQ_CallBack+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	801a      	strh	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &ch, disable);
 80001be:	2201      	movs	r2, #1
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPI_IRQ_CallBack+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPI_IRQ_CallBack+0x3c>)
 80001c4:	f000 fbfc 	bl	80009c0 <MCAL_SPI_TX_RX>
		MCAL_UART_SendData(USART1, &ch,enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPI_IRQ_CallBack+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPI_IRQ_CallBack+0x40>)
 80001ce:	f000 fd3f 	bl	8000c50 <MCAL_UART_SendData>
	}


}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000028 	.word	0x20000028
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <UART_IRQ_CallBack>:

void UART_IRQ_CallBack(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
    MCAL_SPI_TX_RX(SPI1, &ch, enable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif

}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	clock_init();
 80001fa:	f7ff ffb9 	bl	8000170 <clock_init>
	//PA6 : SPI_MISO
	//PA7 : SPI_MOSI
	SPI_Config spiCFG;

	//common Configuration (Master and Slave)
	spiCFG.CLKPhase = SPI_CLKPhase_secondEdge ;
 80001fe:	2301      	movs	r3, #1
 8000200:	847b      	strh	r3, [r7, #34]	; 0x22
	spiCFG.CLKPolarity = SPI_CLKPolarity_HIGH;
 8000202:	2302      	movs	r3, #2
 8000204:	843b      	strh	r3, [r7, #32]
	spiCFG.Frame_Format = SPI_Frame_Format_MSBfirst;
 8000206:	2300      	movs	r3, #0
 8000208:	83bb      	strh	r3, [r7, #28]
	spiCFG.DataSize = SPI_DataSize_8BIT;
 800020a:	2300      	movs	r3, #0
 800020c:	83fb      	strh	r3, [r7, #30]
	//ASSUME by defalute pclk2 = 8MHZ
	spiCFG.BaudRate_Prescaler = SPI_BaudRate_Prescaler_8;
 800020e:	2310      	movs	r3, #16
 8000210:	84fb      	strh	r3, [r7, #38]	; 0x26
	spiCFG.Communication_Mode =SPI_Direction_2LINE;
 8000212:	2300      	movs	r3, #0
 8000214:	837b      	strh	r3, [r7, #26]
		//Force the slave slect HIGH idle mode
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif

#ifdef MCU_ACT_AS_SLAVE
	spiCFG.Device_Mode = SPI_Device_Mode_SLAVE;
 8000216:	2300      	movs	r3, #0
 8000218:	833b      	strh	r3, [r7, #24]
	spiCFG.IRQ_Enable = SPI_IRQ_Enable_RXNE;
 800021a:	2340      	movs	r3, #64	; 0x40
 800021c:	853b      	strh	r3, [r7, #40]	; 0x28
	spiCFG.NSS = SPI_NSS_Hard_Slave;
 800021e:	2300      	movs	r3, #0
 8000220:	84bb      	strh	r3, [r7, #36]	; 0x24
	spiCFG.P_IRQ_CallBack = SPI_IRQ_CallBack ;
 8000222:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0x78>)
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	MCAL_SPI_Init(SPI1, &spiCFG);
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4619      	mov	r1, r3
 800022c:	4810      	ldr	r0, [pc, #64]	; (8000270 <main+0x7c>)
 800022e:	f000 fa39 	bl	80006a4 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000232:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0x7c>)
 8000234:	f000 face 	bl	80007d4 <MCAL_SPI_GPIO_Set_Pins>


	//================UART Init===========================
		UART_Config uartCFG;

		uartCFG.BaudRate = UART_BaudRate_115200 ;
 8000238:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800023c:	60bb      	str	r3, [r7, #8]
		uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
		uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000242:	2320      	movs	r3, #32
 8000244:	743b      	strb	r3, [r7, #16]
		uartCFG.P_IRQ_CallBack = UART_IRQ_CallBack;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <main+0x80>)
 8000248:	617b      	str	r3, [r7, #20]
		uartCFG.Parity = UART_Parity__NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	737b      	strb	r3, [r7, #13]
		uartCFG.Payload_Length = UART_Payload_Length_8B;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
		uartCFG.StopBits = UART_StopBits__1;
 8000252:	2300      	movs	r3, #0
 8000254:	73bb      	strb	r3, [r7, #14]
		uartCFG.USART_Mode = UART_MODE_TX_RX;
 8000256:	230c      	movs	r3, #12
 8000258:	713b      	strb	r3, [r7, #4]


		MCAL_UART_Init(USART1, &uartCFG);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <main+0x84>)
 8000260:	f000 fc34 	bl	8000acc <MCAL_UART_Init>
		MCAL_UART_GPIO_Set_Pins(USART1);
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <main+0x84>)
 8000266:	f000 fd0f 	bl	8000c88 <MCAL_UART_GPIO_Set_Pins>
	while(1){
 800026a:	e7fe      	b.n	800026a <main+0x76>
 800026c:	080001a5 	.word	0x080001a5
 8000270:	40013000 	.word	0x40013000
 8000274:	080001e9 	.word	0x080001e9
 8000278:	40013800 	.word	0x40013800

0800027c <Reset_Handler>:
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
 800027e:	4685      	mov	sp, r0
 8000280:	f3af 8000 	nop.w
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
 800028a:	2300      	movs	r3, #0
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:
 800028e:	58d4      	ldr	r4, [r2, r3]
 8000290:	50c4      	str	r4, [r0, r3]
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:
 8000294:	18c4      	adds	r4, r0, r3
 8000296:	428c      	cmp	r4, r1
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
 800029e:	2300      	movs	r3, #0
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:
 80002a6:	42a2      	cmp	r2, r4
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>
 80002aa:	f000 fd71 	bl	8000d90 <__libc_init_array>
 80002ae:	f7ff ffa1 	bl	80001f4 <main>

080002b2 <LoopForever>:
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
 80002b4:	20002800 	.word	0x20002800
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000000 	.word	0x20000000
 80002c0:	08000e10 	.word	0x08000e10
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000068 	.word	0x20000068

080002cc <ADC1_2_IRQHandler>:
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>

080002ce <Get_CRLH_Position>:
//#define Get_CRLH_Position(PinNumber)  ((PinNumber < GPIO_PIN_8) ?(4 * PinNumber) : (4 * (PinNumber-GPIO_PIN_8)))



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	4603      	mov	r3, r0
 80002d6:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80002d8:	88fb      	ldrh	r3, [r7, #6]
 80002da:	2b80      	cmp	r3, #128	; 0x80
 80002dc:	d042      	beq.n	8000364 <Get_CRLH_Position+0x96>
 80002de:	2b80      	cmp	r3, #128	; 0x80
 80002e0:	dc11      	bgt.n	8000306 <Get_CRLH_Position+0x38>
 80002e2:	2b08      	cmp	r3, #8
 80002e4:	d036      	beq.n	8000354 <Get_CRLH_Position+0x86>
 80002e6:	2b08      	cmp	r3, #8
 80002e8:	dc06      	bgt.n	80002f8 <Get_CRLH_Position+0x2a>
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d02e      	beq.n	800034c <Get_CRLH_Position+0x7e>
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	d02e      	beq.n	8000350 <Get_CRLH_Position+0x82>
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d028      	beq.n	8000348 <Get_CRLH_Position+0x7a>
 80002f6:	e047      	b.n	8000388 <Get_CRLH_Position+0xba>
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	d02f      	beq.n	800035c <Get_CRLH_Position+0x8e>
 80002fc:	2b40      	cmp	r3, #64	; 0x40
 80002fe:	d02f      	beq.n	8000360 <Get_CRLH_Position+0x92>
 8000300:	2b10      	cmp	r3, #16
 8000302:	d029      	beq.n	8000358 <Get_CRLH_Position+0x8a>
 8000304:	e040      	b.n	8000388 <Get_CRLH_Position+0xba>
 8000306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800030a:	d033      	beq.n	8000374 <Get_CRLH_Position+0xa6>
 800030c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000310:	dc09      	bgt.n	8000326 <Get_CRLH_Position+0x58>
 8000312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000316:	d029      	beq.n	800036c <Get_CRLH_Position+0x9e>
 8000318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800031c:	d028      	beq.n	8000370 <Get_CRLH_Position+0xa2>
 800031e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000322:	d021      	beq.n	8000368 <Get_CRLH_Position+0x9a>
 8000324:	e030      	b.n	8000388 <Get_CRLH_Position+0xba>
 8000326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800032a:	d027      	beq.n	800037c <Get_CRLH_Position+0xae>
 800032c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000330:	dc03      	bgt.n	800033a <Get_CRLH_Position+0x6c>
 8000332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000336:	d01f      	beq.n	8000378 <Get_CRLH_Position+0xaa>
 8000338:	e026      	b.n	8000388 <Get_CRLH_Position+0xba>
 800033a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800033e:	d01f      	beq.n	8000380 <Get_CRLH_Position+0xb2>
 8000340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000344:	d01e      	beq.n	8000384 <Get_CRLH_Position+0xb6>
 8000346:	e01f      	b.n	8000388 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000348:	2300      	movs	r3, #0
 800034a:	e01e      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800034c:	2304      	movs	r3, #4
 800034e:	e01c      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 8000350:	2308      	movs	r3, #8
 8000352:	e01a      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000354:	230c      	movs	r3, #12
 8000356:	e018      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000358:	2310      	movs	r3, #16
 800035a:	e016      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800035c:	2314      	movs	r3, #20
 800035e:	e014      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000360:	2318      	movs	r3, #24
 8000362:	e012      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000364:	231c      	movs	r3, #28
 8000366:	e010      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 8000368:	2300      	movs	r3, #0
 800036a:	e00e      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800036c:	2304      	movs	r3, #4
 800036e:	e00c      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000370:	2308      	movs	r3, #8
 8000372:	e00a      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000374:	230c      	movs	r3, #12
 8000376:	e008      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000378:	2310      	movs	r3, #16
 800037a:	e006      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800037c:	2314      	movs	r3, #20
 800037e:	e004      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000380:	2318      	movs	r3, #24
 8000382:	e002      	b.n	800038a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000384:	231c      	movs	r3, #28
 8000386:	e000      	b.n	800038a <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <MCAL_GPIO_Init>:
* Note					-stm32f103c6 MCU has GPIO A,B,C,D,E Modules
* 						 but LQFP48 Package has only Gpio A,B part of C/D exported as external pins from the MCU
*/

void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PinConfig_t * PinConfig)
{
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configure PINS from 8 >>> 15

	volatile uint32_t* configregister = NULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
	uint8_t  PIN_Config = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	2bff      	cmp	r3, #255	; 0xff
 80003ac:	d801      	bhi.n	80003b2 <MCAL_GPIO_Init+0x1e>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	e001      	b.n	80003b6 <MCAL_GPIO_Init+0x22>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3304      	adds	r3, #4
 80003b6:	60bb      	str	r3, [r7, #8]
	//Clear CNF[1:0] MODE[1;0]
	(*configregister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff86 	bl	80002ce <Get_CRLH_Position>
 80003c2:	4603      	mov	r3, r0
 80003c4:	461a      	mov	r2, r3
 80003c6:	230f      	movs	r3, #15
 80003c8:	4093      	lsls	r3, r2
 80003ca:	43da      	mvns	r2, r3
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	401a      	ands	r2, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	789b      	ldrb	r3, [r3, #2]
 80003da:	2b07      	cmp	r3, #7
 80003dc:	d00b      	beq.n	80003f6 <MCAL_GPIO_Init+0x62>
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	789b      	ldrb	r3, [r3, #2]
 80003e2:	2b06      	cmp	r3, #6
 80003e4:	d007      	beq.n	80003f6 <MCAL_GPIO_Init+0x62>
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	2b05      	cmp	r3, #5
 80003ec:	d003      	beq.n	80003f6 <MCAL_GPIO_Init+0x62>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d10e      	bne.n	8000414 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1;0]
		PIN_Config =  ((((PinConfig->GPIO_MODE- 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	789b      	ldrb	r3, [r3, #2]
 80003fa:	3b04      	subs	r3, #4
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	b25a      	sxtb	r2, r3
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	78db      	ldrb	r3, [r3, #3]
 8000404:	b25b      	sxtb	r3, r3
 8000406:	4313      	orrs	r3, r2
 8000408:	b25b      	sxtb	r3, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	73fb      	strb	r3, [r7, #15]
 8000412:	e02c      	b.n	800046e <MCAL_GPIO_Init+0xda>
	}
	else  // Mode = 0x00 inpute mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	789b      	ldrb	r3, [r3, #2]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d003      	beq.n	8000424 <MCAL_GPIO_Init+0x90>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d107      	bne.n	8000434 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((PinConfig->GPIO_MODE ) << 2) | 0x00) & 0x0f );
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	f003 030f 	and.w	r3, r3, #15
 8000430:	73fb      	strb	r3, [r7, #15]
 8000432:	e01c      	b.n	800046e <MCAL_GPIO_Init+0xda>

		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))   // consider it as input floating
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	789b      	ldrb	r3, [r3, #2]
 8000438:	2b08      	cmp	r3, #8
 800043a:	d102      	bne.n	8000442 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((GPIO_MODE_INPUT_FLO ) << 2) | 0x0) & 0x0f );
 800043c:	2304      	movs	r3, #4
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e015      	b.n	800046e <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config =  ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0f );
 8000442:	2308      	movs	r3, #8
 8000444:	73fb      	strb	r3, [r7, #15]
			if( PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	789b      	ldrb	r3, [r3, #2]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d107      	bne.n	800045e <MCAL_GPIO_Init+0xca>
			{

				//GPIOx->BSRR =   PinConfig->GPIO_PinNumber;
				GPIOx->ODR |=   PinConfig->GPIO_PinNumber;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	683a      	ldr	r2, [r7, #0]
 8000454:	8812      	ldrh	r2, [r2, #0]
 8000456:	431a      	orrs	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	e007      	b.n	800046e <MCAL_GPIO_Init+0xda>

			}else
			{
			//	GPIOx->BRR &= ~ ( PinConfig->GPIO_PinNumber);
				GPIOx->ODR &= ~ ( PinConfig->GPIO_PinNumber);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	8812      	ldrh	r2, [r2, #0]
 8000466:	43d2      	mvns	r2, r2
 8000468:	401a      	ands	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	60da      	str	r2, [r3, #12]

	}

	// write on CRL or CRH

	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800046e:	7bfc      	ldrb	r4, [r7, #15]
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff2a 	bl	80002ce <Get_CRLH_Position>
 800047a:	4603      	mov	r3, r0
 800047c:	fa04 f203 	lsl.w	r2, r4, r3
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	431a      	orrs	r2, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	601a      	str	r2, [r3, #0]

}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bd90      	pop	{r4, r7, pc}
	...

08000494 <EXTI0_IRQHandler>:
 * 							ISR FUNCTION
 * ==========================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<0;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <EXTI0_IRQHandler+0x1c>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <EXTI0_IRQHandler+0x1c>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]();
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <EXTI0_IRQHandler+0x20>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4798      	blx	r3
	}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40010400 	.word	0x40010400
 80004b4:	2000002c 	.word	0x2000002c

080004b8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<1;
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <EXTI1_IRQHandler+0x1c>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <EXTI1_IRQHandler+0x1c>)
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[1]();
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <EXTI1_IRQHandler+0x20>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4798      	blx	r3
	}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010400 	.word	0x40010400
 80004d8:	2000002c 	.word	0x2000002c

080004dc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<2;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <EXTI2_IRQHandler+0x1c>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <EXTI2_IRQHandler+0x1c>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[2]();
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <EXTI2_IRQHandler+0x20>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4798      	blx	r3
	}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010400 	.word	0x40010400
 80004fc:	2000002c 	.word	0x2000002c

08000500 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<3;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <EXTI3_IRQHandler+0x1c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <EXTI3_IRQHandler+0x1c>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[3]();
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <EXTI3_IRQHandler+0x20>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4798      	blx	r3
	}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40010400 	.word	0x40010400
 8000520:	2000002c 	.word	0x2000002c

08000524 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<4;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <EXTI4_IRQHandler+0x1c>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <EXTI4_IRQHandler+0x1c>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <EXTI4_IRQHandler+0x20>)
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	4798      	blx	r3
	}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400
 8000544:	2000002c 	.word	0x2000002c

08000548 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )  { EXTI->PR |= 1<<5;     GP_IRQ_CallBack[5](); }
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f003 0320 	and.w	r3, r3, #32
 8000554:	2b00      	cmp	r3, #0
 8000556:	d008      	beq.n	800056a <EXTI9_5_IRQHandler+0x22>
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	6153      	str	r3, [r2, #20]
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <EXTI9_5_IRQHandler+0xa4>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )  { EXTI->PR |= 1<<6;     GP_IRQ_CallBack[6](); }
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000572:	2b00      	cmp	r3, #0
 8000574:	d008      	beq.n	8000588 <EXTI9_5_IRQHandler+0x40>
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800057c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <EXTI9_5_IRQHandler+0xa4>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4798      	blx	r3
	if(EXTI->PR & 1<<7 )  { EXTI->PR |= 1<<7;     GP_IRQ_CallBack[7](); }
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI9_5_IRQHandler+0x5e>
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 800059a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <EXTI9_5_IRQHandler+0xa4>)
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )  { EXTI->PR |= 1<<8;     GP_IRQ_CallBack[8](); }
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <EXTI9_5_IRQHandler+0x7c>
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 80005b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <EXTI9_5_IRQHandler+0xa4>)
 80005c0:	6a1b      	ldr	r3, [r3, #32]
 80005c2:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )  { EXTI->PR |= 1<<9;     GP_IRQ_CallBack[9](); }
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d008      	beq.n	80005e2 <EXTI9_5_IRQHandler+0x9a>
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <EXTI9_5_IRQHandler+0xa0>)
 80005d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005da:	6153      	str	r3, [r2, #20]
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <EXTI9_5_IRQHandler+0xa4>)
 80005de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e0:	4798      	blx	r3
	}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010400 	.word	0x40010400
 80005ec:	2000002c 	.word	0x2000002c

080005f0 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	f003 0303 	and.w	r3, r3, #3
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d006      	beq.n	8000610 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000602:	2b01      	cmp	r3, #1
 8000604:	d302      	bcc.n	800060c <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000606:	2b02      	cmp	r3, #2
 8000608:	d004      	beq.n	8000614 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 800060a:	e005      	b.n	8000618 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 800060e:	e003      	b.n	8000618 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000612:	e001      	b.n	8000618 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000616:	e7ff      	b.n	8000618 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	007a1200 	.word	0x007a1200
 8000628:	00f42400 	.word	0x00f42400

0800062c <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000630:	f7ff ffde 	bl	80005f0 <MCAL_RCC_GetSYS_CLCKFreq>
 8000634:	4601      	mov	r1, r0
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MCAL_RCC_GetHCLKFreq+0x20>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	091b      	lsrs	r3, r3, #4
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	08000df8 	.word	0x08000df8

08000654 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000658:	f7ff ffe8 	bl	800062c <MCAL_RCC_GetHCLKFreq>
 800065c:	4601      	mov	r1, r0
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <MCAL_RCC_GetPCLK1Freq+0x24>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000670:	4618      	mov	r0, r3
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	08000df0 	.word	0x08000df0

0800067c <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8000680:	f7ff ffd4 	bl	800062c <MCAL_RCC_GetHCLKFreq>
 8000684:	4601      	mov	r1, r0
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	0adb      	lsrs	r3, r3, #11
 800068c:	f003 0307 	and.w	r3, r3, #7
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	08000df0 	.word	0x08000df0

080006a4 <MCAL_SPI_Init>:
//* Note					- Support for SPI Full Dublex Master /Slave only & NSS HW /SW for slave
 * 							-In case of master you have to configure pinnd drive it
*/
/**================================================================*/

void MCAL_SPI_Init(SPI_TypeDef * SPIx, SPI_Config * SPI_cnfg){
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	//Saftey for register
	uint16_t tempReg_CR1 = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	81fb      	strh	r3, [r7, #14]
	uint16_t tempReg_CR2 = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	81bb      	strh	r3, [r7, #12]
	if(SPIx == SPI1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a41      	ldr	r2, [pc, #260]	; (80007c0 <MCAL_SPI_Init+0x11c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d109      	bne.n	80006d2 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_INDEX]= SPI_cnfg;
 80006be:	4a41      	ldr	r2, [pc, #260]	; (80007c4 <MCAL_SPI_Init+0x120>)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80006c4:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <MCAL_SPI_Init+0x124>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a3f      	ldr	r2, [pc, #252]	; (80007c8 <MCAL_SPI_Init+0x124>)
 80006ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	e00c      	b.n	80006ec <MCAL_SPI_Init+0x48>

	}else if(SPIx == SPI2)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a3d      	ldr	r2, [pc, #244]	; (80007cc <MCAL_SPI_Init+0x128>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d108      	bne.n	80006ec <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_INDEX]= SPI_cnfg;
 80006da:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <MCAL_SPI_Init+0x120>)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80006e0:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <MCAL_SPI_Init+0x124>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a38      	ldr	r2, [pc, #224]	; (80007c8 <MCAL_SPI_Init+0x124>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	61d3      	str	r3, [r2, #28]
	}


	//Bit 6 SPE: SPI enable
	tempReg_CR1 |= (0x1<<6);
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	81fb      	strh	r3, [r7, #14]

	//Master Or Slave
	tempReg_CR1 |= SPI_cnfg->Device_Mode;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	881a      	ldrh	r2, [r3, #0]
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	81fb      	strh	r3, [r7, #14]

	//SPI Communication mode
	tempReg_CR1 |= SPI_cnfg->Communication_Mode;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	885a      	ldrh	r2, [r3, #2]
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	4313      	orrs	r3, r2
 8000706:	81fb      	strh	r3, [r7, #14]

	//SPI  Frame Format
	tempReg_CR1 |= SPI_cnfg->Frame_Format;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	889a      	ldrh	r2, [r3, #4]
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	4313      	orrs	r3, r2
 8000710:	81fb      	strh	r3, [r7, #14]

	//SPI  Data Size
	tempReg_CR1 |= SPI_cnfg->DataSize;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	88da      	ldrh	r2, [r3, #6]
 8000716:	89fb      	ldrh	r3, [r7, #14]
 8000718:	4313      	orrs	r3, r2
 800071a:	81fb      	strh	r3, [r7, #14]

	//SPI	Clock Polarity
	tempReg_CR1 |= SPI_cnfg->CLKPolarity;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	891a      	ldrh	r2, [r3, #8]
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	4313      	orrs	r3, r2
 8000724:	81fb      	strh	r3, [r7, #14]

	//SPI  Clock Phase
	tempReg_CR1 |= SPI_cnfg->CLKPhase;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	895a      	ldrh	r2, [r3, #10]
 800072a:	89fb      	ldrh	r3, [r7, #14]
 800072c:	4313      	orrs	r3, r2
 800072e:	81fb      	strh	r3, [r7, #14]

	//=======================NSS==================//
	if(SPI_cnfg->NSS == SPI_NSS_Hard_Master_NotMultiMaster  )
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	899b      	ldrh	r3, [r3, #12]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d105      	bne.n	8000744 <MCAL_SPI_Init+0xa0>
	{
		tempReg_CR2  |= SPI_cnfg->NSS;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	899a      	ldrh	r2, [r3, #12]
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	4313      	orrs	r3, r2
 8000740:	81bb      	strh	r3, [r7, #12]
 8000742:	e00e      	b.n	8000762 <MCAL_SPI_Init+0xbe>

	}else if(SPI_cnfg->NSS == SPI_NSS_Hard_Master_MultiMaster || SPI_cnfg->NSS == SPI_NSS_Hard_Slave)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	899b      	ldrh	r3, [r3, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d105      	bne.n	8000758 <MCAL_SPI_Init+0xb4>
	{
		tempReg_CR2  &= SPI_cnfg->NSS;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	899a      	ldrh	r2, [r3, #12]
 8000750:	89bb      	ldrh	r3, [r7, #12]
 8000752:	4013      	ands	r3, r2
 8000754:	81bb      	strh	r3, [r7, #12]
 8000756:	e004      	b.n	8000762 <MCAL_SPI_Init+0xbe>
	}else
	{
		tempReg_CR1 |=  SPI_cnfg->NSS;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	899a      	ldrh	r2, [r3, #12]
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	4313      	orrs	r3, r2
 8000760:	81fb      	strh	r3, [r7, #14]
	}


	//SPI	Baud Rate
	tempReg_CR1 |= SPI_cnfg->BaudRate_Prescaler;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	89da      	ldrh	r2, [r3, #14]
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	4313      	orrs	r3, r2
 800076a:	81fb      	strh	r3, [r7, #14]

	// SPI interrupt enable

	if(SPI_cnfg->IRQ_Enable != SPI_IRQ_Enable_NONE)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	8a1b      	ldrh	r3, [r3, #16]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d019      	beq.n	80007a8 <MCAL_SPI_Init+0x104>
	{
		//SPI_IRQ_Enable_define
		tempReg_CR2 |= SPI_cnfg->IRQ_Enable;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	8a1a      	ldrh	r2, [r3, #16]
 8000778:	89bb      	ldrh	r3, [r7, #12]
 800077a:	4313      	orrs	r3, r2
 800077c:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <MCAL_SPI_Init+0x11c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <MCAL_SPI_Init+0xf0>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MCAL_SPI_Init+0x12c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <MCAL_SPI_Init+0x12c>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e009      	b.n	80007a8 <MCAL_SPI_Init+0x104>

		}else if(SPIx == SPI2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <MCAL_SPI_Init+0x128>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d105      	bne.n	80007a8 <MCAL_SPI_Init+0x104>
		{
			NVIC_IRQ36_SPI2_Enable;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MCAL_SPI_Init+0x12c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <MCAL_SPI_Init+0x12c>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tempReg_CR1;
 80007a8:	89fa      	ldrh	r2, [r7, #14]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempReg_CR2;
 80007ae:	89ba      	ldrh	r2, [r7, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40013000 	.word	0x40013000
 80007c4:	2000001c 	.word	0x2000001c
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40003800 	.word	0x40003800
 80007d0:	e000e104 	.word	0xe000e104

080007d4 <MCAL_SPI_GPIO_Set_Pins>:
* @retval 				- none
* Note					-  none.
*/
/**================================================================*/
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef * SPIx)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pin_cnfg;

	if(SPIx == SPI1){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a73      	ldr	r2, [pc, #460]	; (80009ac <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d169      	bne.n	80008b8 <MCAL_SPI_GPIO_Set_Pins+0xe4>
		//PA4 : SPI_NSS
		//PA5 : SPI_SCK
		//PA6 : SPI_MISO
		//PA7 : SPI_MOSI

		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 80007e4:	4b72      	ldr	r3, [pc, #456]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d134      	bne.n	8000858 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			//PA4 : SPI_NSS

		switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 80007ee:	4b70      	ldr	r3, [pc, #448]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d10c      	bne.n	8000812 <MCAL_SPI_GPIO_Set_Pins+0x3e>
			MCAL_GPIO_Init(GPIOA, &pin_cnfg);
			break;

		case SPI_NSS_Hard_Master_NotMultiMaster:
			//Hardware master/ NSS output enabled Alternate function push-pull
			pin_cnfg.GPIO_PinNumber= GPIO_PIN_4;
 80007f8:	2310      	movs	r3, #16
 80007fa:	81bb      	strh	r3, [r7, #12]
			pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007fc:	2306      	movs	r3, #6
 80007fe:	73bb      	strb	r3, [r7, #14]
			pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	486a      	ldr	r0, [pc, #424]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800080c:	f7ff fdc2 	bl	8000394 <MCAL_GPIO_Init>

			break;
 8000810:	bf00      	nop
		}
		//PA5 : SPI_SCK
//Master Alternate function push-pull
		pin_cnfg.GPIO_PinNumber= GPIO_PIN_5;
 8000812:	2320      	movs	r3, #32
 8000814:	81bb      	strh	r3, [r7, #12]
		pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000816:	2306      	movs	r3, #6
 8000818:	73bb      	strb	r3, [r7, #14]
		pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	4863      	ldr	r0, [pc, #396]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000826:	f7ff fdb5 	bl	8000394 <MCAL_GPIO_Init>

		//PA6 : SPI_MISO
		//Full duplex / master Input floating / Input pull-up
		pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800082a:	2301      	movs	r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
		pin_cnfg.GPIO_PinNumber= GPIO_PIN_6;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	485e      	ldr	r0, [pc, #376]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800083a:	f7ff fdab 	bl	8000394 <MCAL_GPIO_Init>

		//PA7 : SPI_MOSI
//Full duplex / master Alternate function push-pull
		pin_cnfg.GPIO_PinNumber= GPIO_PIN_7;
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	81bb      	strh	r3, [r7, #12]
		pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000842:	2306      	movs	r3, #6
 8000844:	73bb      	strb	r3, [r7, #14]
		pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4858      	ldr	r0, [pc, #352]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000852:	f7ff fd9f 	bl	8000394 <MCAL_GPIO_Init>
					pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
					pin_cnfg.GPIO_PinNumber= GPIO_PIN_15;
					MCAL_GPIO_Init(GPIOB, &pin_cnfg);
	}

}
 8000856:	e0a4      	b.n	80009a2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 8000858:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	899b      	ldrh	r3, [r3, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d109      	bne.n	8000876 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000862:	2301      	movs	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
				pin_cnfg.GPIO_PinNumber= GPIO_PIN_4;
 8000866:	2310      	movs	r3, #16
 8000868:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000872:	f7ff fd8f 	bl	8000394 <MCAL_GPIO_Init>
			pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000876:	2301      	movs	r3, #1
 8000878:	73bb      	strb	r3, [r7, #14]
			pin_cnfg.GPIO_PinNumber= GPIO_PIN_5;
 800087a:	2320      	movs	r3, #32
 800087c:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	484b      	ldr	r0, [pc, #300]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000886:	f7ff fd85 	bl	8000394 <MCAL_GPIO_Init>
			pin_cnfg.GPIO_PinNumber= GPIO_PIN_6;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	81bb      	strh	r3, [r7, #12]
			pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800088e:	2306      	movs	r3, #6
 8000890:	73bb      	strb	r3, [r7, #14]
			pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4845      	ldr	r0, [pc, #276]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800089e:	f7ff fd79 	bl	8000394 <MCAL_GPIO_Init>
			pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73bb      	strb	r3, [r7, #14]
			pin_cnfg.GPIO_PinNumber= GPIO_PIN_7;
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &pin_cnfg);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4840      	ldr	r0, [pc, #256]	; (80009b4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008b2:	f7ff fd6f 	bl	8000394 <MCAL_GPIO_Init>
}
 80008b6:	e074      	b.n	80009a2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	}else if(SPIx == SPI2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d13d      	bne.n	800093c <MCAL_SPI_GPIO_Set_Pins+0x168>
		if(Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 80008c0:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d16b      	bne.n	80009a2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
				switch(Global_SPI_Config[SPI2_INDEX]->NSS)
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	899b      	ldrh	r3, [r3, #12]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d10d      	bne.n	80008f0 <MCAL_SPI_GPIO_Set_Pins+0x11c>
					pin_cnfg.GPIO_PinNumber= GPIO_PIN_12;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	81bb      	strh	r3, [r7, #12]
					pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008da:	2306      	movs	r3, #6
 80008dc:	73bb      	strb	r3, [r7, #14]
					pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4834      	ldr	r0, [pc, #208]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008ea:	f7ff fd53 	bl	8000394 <MCAL_GPIO_Init>
					break;
 80008ee:	bf00      	nop
				pin_cnfg.GPIO_PinNumber= GPIO_PIN_13;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	81bb      	strh	r3, [r7, #12]
				pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008f6:	2306      	movs	r3, #6
 80008f8:	73bb      	strb	r3, [r7, #14]
				pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000906:	f7ff fd45 	bl	8000394 <MCAL_GPIO_Init>
				pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800090a:	2301      	movs	r3, #1
 800090c:	73bb      	strb	r3, [r7, #14]
				pin_cnfg.GPIO_PinNumber= GPIO_PIN_14;
 800090e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000912:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4828      	ldr	r0, [pc, #160]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800091c:	f7ff fd3a 	bl	8000394 <MCAL_GPIO_Init>
				pin_cnfg.GPIO_PinNumber= GPIO_PIN_15;
 8000920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000924:	81bb      	strh	r3, [r7, #12]
				pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000926:	2306      	movs	r3, #6
 8000928:	73bb      	strb	r3, [r7, #14]
				pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800092a:	2301      	movs	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4821      	ldr	r0, [pc, #132]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000936:	f7ff fd2d 	bl	8000394 <MCAL_GPIO_Init>
}
 800093a:	e032      	b.n	80009a2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
					if(Global_SPI_Config[SPI2_INDEX]->NSS == SPI_NSS_Hard_Slave)
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	899b      	ldrh	r3, [r3, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10a      	bne.n	800095c <MCAL_SPI_GPIO_Set_Pins+0x188>
						pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000946:	2301      	movs	r3, #1
 8000948:	73bb      	strb	r3, [r7, #14]
						pin_cnfg.GPIO_PinNumber= GPIO_PIN_12;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	81bb      	strh	r3, [r7, #12]
						MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4819      	ldr	r0, [pc, #100]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000958:	f7ff fd1c 	bl	8000394 <MCAL_GPIO_Init>
					pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800095c:	2301      	movs	r3, #1
 800095e:	73bb      	strb	r3, [r7, #14]
					pin_cnfg.GPIO_PinNumber= GPIO_PIN_13;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	81bb      	strh	r3, [r7, #12]
					MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800096e:	f7ff fd11 	bl	8000394 <MCAL_GPIO_Init>
					pin_cnfg.GPIO_PinNumber= GPIO_PIN_14;
 8000972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000976:	81bb      	strh	r3, [r7, #12]
					pin_cnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000978:	2306      	movs	r3, #6
 800097a:	73bb      	strb	r3, [r7, #14]
					pin_cnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000988:	f7ff fd04 	bl	8000394 <MCAL_GPIO_Init>
					pin_cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800098c:	2301      	movs	r3, #1
 800098e:	73bb      	strb	r3, [r7, #14]
					pin_cnfg.GPIO_PinNumber= GPIO_PIN_15;
 8000990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000994:	81bb      	strh	r3, [r7, #12]
					MCAL_GPIO_Init(GPIOB, &pin_cnfg);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800099e:	f7ff fcf9 	bl	8000394 <MCAL_GPIO_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40013000 	.word	0x40013000
 80009b0:	2000001c 	.word	0x2000001c
 80009b4:	40010800 	.word	0x40010800
 80009b8:	40003800 	.word	0x40003800
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <MCAL_SPI_TX_RX>:
* Note					-  none.
*/
/**================================================================*/

void MCAL_SPI_TX_RX(SPI_TypeDef * SPIx, uint16_t * pTxBuffer, enum Polling_mechanism  PollingEn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	4613      	mov	r3, r2
 80009cc:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == enable)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d106      	bne.n	80009e2 <MCAL_SPI_TX_RX+0x22>
		while(!(SPIx->SR & SPI_SR_TXE));
 80009d4:	bf00      	nop
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f9      	beq.n	80009d6 <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *pTxBuffer;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	60da      	str	r2, [r3, #12]

	if(PollingEn == enable)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d106      	bne.n	8000a00 <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SR & SPI_SR_RXNE));
 80009f2:	bf00      	nop
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f9      	beq.n	80009f4 <MCAL_SPI_TX_RX+0x34>
	*pTxBuffer = SPIx->DR ;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	801a      	strh	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SPI1_IRQHandler>:
 * =========================================================================
 * 							ISR
 * ==========================================================================
 */

void SPI1_IRQHandler(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SR &(1<<1))>>1);
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <SPI1_IRQHandler+0x54>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	085b      	lsrs	r3, r3, #1
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	793b      	ldrb	r3, [r7, #4]
 8000a28:	f362 0300 	bfi	r3, r2, #0, #1
 8000a2c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR &(1<<0))>>0);
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SPI1_IRQHandler+0x54>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	793b      	ldrb	r3, [r7, #4]
 8000a3a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a3e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR &(1<<4))>>4);
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <SPI1_IRQHandler+0x54>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	793b      	ldrb	r3, [r7, #4]
 8000a4e:	f362 0382 	bfi	r3, r2, #2, #1
 8000a52:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SPI1_IRQHandler+0x58>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	7938      	ldrb	r0, [r7, #4]
 8000a5c:	4798      	blx	r3

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	2000001c 	.word	0x2000001c

08000a70 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI2->SR &(1<<1))>>1);
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <SPI2_IRQHandler+0x54>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	085b      	lsrs	r3, r3, #1
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	793b      	ldrb	r3, [r7, #4]
 8000a84:	f362 0300 	bfi	r3, r2, #0, #1
 8000a88:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR &(1<<0))>>0);
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <SPI2_IRQHandler+0x54>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	793b      	ldrb	r3, [r7, #4]
 8000a96:	f362 0341 	bfi	r3, r2, #1, #1
 8000a9a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR &(1<<4))>>4);
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <SPI2_IRQHandler+0x54>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	793b      	ldrb	r3, [r7, #4]
 8000aaa:	f362 0382 	bfi	r3, r2, #2, #1
 8000aae:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SPI2_IRQHandler+0x58>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	7938      	ldrb	r0, [r7, #4]
 8000ab8:	4798      	blx	r3
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40003800 	.word	0x40003800
 8000ac8:	2000001c 	.word	0x2000001c

08000acc <MCAL_UART_Init>:
* Note					- Now Support ASYNCH mode and Clock 8Mhz
*/
/**================================================================*/

	void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
	{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
		Global_UART_Config = UART_Config ;
 8000ad6:	4a57      	ldr	r2, [pc, #348]	; (8000c34 <MCAL_UART_Init+0x168>)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	6013      	str	r3, [r2, #0]
		uint32_t pclk ,BRR  ;
		//	enable the Clock for given USART peripheral

		if ( USARTx == USART1 )
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <MCAL_UART_Init+0x16c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d106      	bne.n	8000af2 <MCAL_UART_Init+0x26>
			RCC_USART1_CLK_EN();
 8000ae4:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <MCAL_UART_Init+0x170>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a54      	ldr	r2, [pc, #336]	; (8000c3c <MCAL_UART_Init+0x170>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	e014      	b.n	8000b1c <MCAL_UART_Init+0x50>

		else if ( USARTx == USART2 )
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a52      	ldr	r2, [pc, #328]	; (8000c40 <MCAL_UART_Init+0x174>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d106      	bne.n	8000b08 <MCAL_UART_Init+0x3c>
			RCC_USART2_CLK_EN();
 8000afa:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <MCAL_UART_Init+0x170>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a4f      	ldr	r2, [pc, #316]	; (8000c3c <MCAL_UART_Init+0x170>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	e009      	b.n	8000b1c <MCAL_UART_Init+0x50>

		else if ( USARTx == USART3 )
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4e      	ldr	r2, [pc, #312]	; (8000c44 <MCAL_UART_Init+0x178>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d105      	bne.n	8000b1c <MCAL_UART_Init+0x50>
			RCC_USART3_CLK_EN();
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <MCAL_UART_Init+0x170>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <MCAL_UART_Init+0x170>)
 8000b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1a:	61d3      	str	r3, [r2, #28]



		//Enable USART Module
		//	USART_CR1  Bit 13 UE: USART enable
		USARTx->CR1 |= 1<<13 ;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60da      	str	r2, [r3, #12]

		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
		USARTx->CR1 |= UART_Config->USART_Mode ;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	7812      	ldrb	r2, [r2, #0]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60da      	str	r2, [r3, #12]

		//PAYLOAD Width
		// USARTx->CR1  Bit 12 M: Word length
		USARTx->CR1 |= UART_Config->Payload_Length;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	7a12      	ldrb	r2, [r2, #8]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60da      	str	r2, [r3, #12]

		//Configuration of parity control bit fields
		// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
		USARTx->CR1 |= UART_Config->Parity ;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	7a52      	ldrb	r2, [r2, #9]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60da      	str	r2, [r3, #12]

		//configure the number of stop bits
		//USART_CR2  Bits 13:12 STOP: STOP bits
		USARTx->CR2 |= UART_Config->StopBits ;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	7a92      	ldrb	r2, [r2, #10]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	611a      	str	r2, [r3, #16]


		//USART hardware flow control
		//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
		USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	7ad2      	ldrb	r2, [r2, #11]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	615a      	str	r2, [r3, #20]


		//Configuration of BRR(Baudrate register)
		//PCLK1 for USART2, 3
		//PCLK2 for USART1
		if ( USARTx == USART1 )
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <MCAL_UART_Init+0x16c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d103      	bne.n	8000b7e <MCAL_UART_Init+0xb2>
		{
			pclk = MCAL_RCC_GetPCLK2Freq();
 8000b76:	f7ff fd81 	bl	800067c <MCAL_RCC_GetPCLK2Freq>
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	e002      	b.n	8000b84 <MCAL_UART_Init+0xb8>
		}
		else
		{
			pclk = MCAL_RCC_GetPCLK1Freq();
 8000b7e:	f7ff fd69 	bl	8000654 <MCAL_RCC_GetPCLK1Freq>
 8000b82:	60f8      	str	r0, [r7, #12]
		}

		BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b90:	0119      	lsls	r1, r3, #4
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	009a      	lsls	r2, r3, #2
 8000b9c:	441a      	add	r2, r3
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	fb00 f303 	mul.w	r3, r0, r3
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <MCAL_UART_Init+0x17c>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	095b      	lsrs	r3, r3, #5
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	60bb      	str	r3, [r7, #8]

		USARTx->BRR = BRR ;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	609a      	str	r2, [r3, #8]


		//ENABLE / DISABLE Interrupt
		//USART_CR1
		if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d026      	beq.n	8000c2a <MCAL_UART_Init+0x15e>
		{
			USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	7b12      	ldrb	r2, [r2, #12]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60da      	str	r2, [r3, #12]
			//		Enable NVIC For USARTx IRQ
			if ( USARTx == USART1 )
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <MCAL_UART_Init+0x16c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <MCAL_UART_Init+0x134>
				NVIC_IRQ37_USART1_Enable ;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MCAL_UART_Init+0x180>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MCAL_UART_Init+0x180>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	6013      	str	r3, [r2, #0]

			else if ( USARTx == USART3 )
				NVIC_IRQ39_USART3_Enable ;
		}

	}
 8000bfe:	e014      	b.n	8000c2a <MCAL_UART_Init+0x15e>
			else if ( USARTx == USART2 )
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <MCAL_UART_Init+0x174>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d106      	bne.n	8000c16 <MCAL_UART_Init+0x14a>
				NVIC_IRQ38_USART2_Enable ;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MCAL_UART_Init+0x180>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <MCAL_UART_Init+0x180>)
 8000c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c12:	6013      	str	r3, [r2, #0]
	}
 8000c14:	e009      	b.n	8000c2a <MCAL_UART_Init+0x15e>
			else if ( USARTx == USART3 )
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <MCAL_UART_Init+0x178>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d105      	bne.n	8000c2a <MCAL_UART_Init+0x15e>
				NVIC_IRQ39_USART3_Enable ;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MCAL_UART_Init+0x180>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <MCAL_UART_Init+0x180>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6013      	str	r3, [r2, #0]
	}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000024 	.word	0x20000024
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40004800 	.word	0x40004800
 8000c48:	51eb851f 	.word	0x51eb851f
 8000c4c:	e000e104 	.word	0xe000e104

08000c50 <MCAL_UART_SendData>:
							//When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
*/
/**================================================================*/

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechanism PollingEn )
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == enable){
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d106      	bne.n	8000c72 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8000c64:	bf00      	nop
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <MCAL_UART_SendData+0x16>
	//check usart wordlength item for 9 bit or 8 bit

	if(Global_UART_Config->Payload_Length == UART_Payload_Length_9B){
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x01ff);
	}else{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0xff);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	605a      	str	r2, [r3, #4]
	}

}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <MCAL_UART_GPIO_Set_Pins>:
* @param [in] 			- USARTx : where x can be (1,2,3,.. depending on device used)
* @retval 				- none
* Note					- Now Support ASYNCH mode and Clock 8Mhz
*/
/**================================================================*/
void MCAL_UART_GPIO_Set_Pins(USART_TypeDef * USARTx){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t pinCnfg;

	if(USARTx == USART1){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d118      	bne.n	8000cca <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pinCnfg.GPIO_PinNumber = GPIO_PIN_9;
 8000c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9c:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed= GPIO_SPEED_10M;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCnfg);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4825      	ldr	r0, [pc, #148]	; (8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cae:	f7ff fb71 	bl	8000394 <MCAL_GPIO_Init>

		//PA10 RX
		pinCnfg.GPIO_PinNumber = GPIO_PIN_10;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCnfg);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4820      	ldr	r0, [pc, #128]	; (8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cc4:	f7ff fb66 	bl	8000394 <MCAL_GPIO_Init>

					}


		}
}
 8000cc8:	e036      	b.n	8000d38 <MCAL_UART_GPIO_Set_Pins+0xb0>
		}else if(USARTx == USART2){
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <MCAL_UART_GPIO_Set_Pins+0x78>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_2;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	73bb      	strb	r3, [r7, #14]
					pinCnfg.GPIO_Output_Speed= GPIO_SPEED_10M;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOA, &pinCnfg);
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4817      	ldr	r0, [pc, #92]	; (8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000ce6:	f7ff fb55 	bl	8000394 <MCAL_GPIO_Init>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_3;
 8000cea:	2308      	movs	r3, #8
 8000cec:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &pinCnfg);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000cfa:	f7ff fb4b 	bl	8000394 <MCAL_GPIO_Init>
}
 8000cfe:	e01b      	b.n	8000d38 <MCAL_UART_GPIO_Set_Pins+0xb0>
		}else if(USARTx == USART3){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d117      	bne.n	8000d38 <MCAL_UART_GPIO_Set_Pins+0xb0>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0c:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	73bb      	strb	r3, [r7, #14]
					pinCnfg.GPIO_Output_Speed= GPIO_SPEED_10M;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &pinCnfg);
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d1e:	f7ff fb39 	bl	8000394 <MCAL_GPIO_Init>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_11;
 8000d22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d26:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &pinCnfg);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d34:	f7ff fb2e 	bl	8000394 <MCAL_GPIO_Init>
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <USART1_IRQHandler+0x10>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4798      	blx	r3

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000024 	.word	0x20000024

08000d68 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <USART2_IRQHandler+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	4798      	blx	r3

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000024 	.word	0x20000024

08000d7c <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <USART3_IRQHandler+0x10>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	4798      	blx	r3

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000024 	.word	0x20000024

08000d90 <__libc_init_array>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	2500      	movs	r5, #0
 8000d94:	4e0c      	ldr	r6, [pc, #48]	; (8000dc8 <__libc_init_array+0x38>)
 8000d96:	4c0d      	ldr	r4, [pc, #52]	; (8000dcc <__libc_init_array+0x3c>)
 8000d98:	1ba4      	subs	r4, r4, r6
 8000d9a:	10a4      	asrs	r4, r4, #2
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	d109      	bne.n	8000db4 <__libc_init_array+0x24>
 8000da0:	f000 f81a 	bl	8000dd8 <_init>
 8000da4:	2500      	movs	r5, #0
 8000da6:	4e0a      	ldr	r6, [pc, #40]	; (8000dd0 <__libc_init_array+0x40>)
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <__libc_init_array+0x44>)
 8000daa:	1ba4      	subs	r4, r4, r6
 8000dac:	10a4      	asrs	r4, r4, #2
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d105      	bne.n	8000dbe <__libc_init_array+0x2e>
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db8:	4798      	blx	r3
 8000dba:	3501      	adds	r5, #1
 8000dbc:	e7ee      	b.n	8000d9c <__libc_init_array+0xc>
 8000dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc2:	4798      	blx	r3
 8000dc4:	3501      	adds	r5, #1
 8000dc6:	e7f2      	b.n	8000dae <__libc_init_array+0x1e>
 8000dc8:	08000e08 	.word	0x08000e08
 8000dcc:	08000e08 	.word	0x08000e08
 8000dd0:	08000e08 	.word	0x08000e08
 8000dd4:	08000e0c 	.word	0x08000e0c

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
