
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000089c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080009cc  080009cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009e4  080009e4  000109ec  2**0
                  CONTENTS
  4 .ARM          00000000  080009e4  080009e4  000109ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009e4  080009ec  000109ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009e4  080009e4  000109e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009e8  080009e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  080009ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080009ec  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000109ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040f5  00000000  00000000  00010a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f3  00000000  00000000  00014b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b0c  00000000  00000000  000154fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  00016010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  000161f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c3c  00000000  00000000  00016378  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000025ae  00000000  00000000  00016fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a14c  00000000  00000000  00019562  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000236ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005e0  00000000  00000000  0002372c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009b4 	.word	0x080009b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009b4 	.word	0x080009b4

08000170 <clock_init>:
#include "../stm32_F103C6_drivers/inc/stm32f103c6_EXTI_driver.h"
#include "../stm32_F103C6_drivers/inc/stm32f103c6_USART_driver.h"

	unsigned char ch;

void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <UART_IRQ_CallBack>:

void UART_IRQ_CallBack(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0

	MCAL_UART_ReceivData(USART1, &ch, disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	4905      	ldr	r1, [pc, #20]	; (80001c0 <UART_IRQ_CallBack+0x1c>)
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <UART_IRQ_CallBack+0x20>)
 80001ae:	f000 fb2b 	bl	8000808 <MCAL_UART_ReceivData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	4902      	ldr	r1, [pc, #8]	; (80001c0 <UART_IRQ_CallBack+0x1c>)
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <UART_IRQ_CallBack+0x20>)
 80001b8:	f000 fb0a 	bl	80007d0 <MCAL_UART_SendData>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	40013800 	.word	0x40013800

080001c8 <main>:

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	clock_init();
 80001ce:	f7ff ffcf 	bl	8000170 <clock_init>



	UART_Config uartCFG;

	uartCFG.BaudRate = UART_BaudeRate_115200 ;
 80001d2:	2300      	movs	r3, #0
 80001d4:	717b      	strb	r3, [r7, #5]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 80001d6:	2300      	movs	r3, #0
 80001d8:	727b      	strb	r3, [r7, #9]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNE;
 80001da:	2320      	movs	r3, #32
 80001dc:	72bb      	strb	r3, [r7, #10]
	uartCFG.P_IRQ_CallBack = UART_IRQ_CallBack;
 80001de:	4b09      	ldr	r3, [pc, #36]	; (8000204 <main+0x3c>)
 80001e0:	60fb      	str	r3, [r7, #12]
	uartCFG.Parity = UART_Parity_NONE;
 80001e2:	2300      	movs	r3, #0
 80001e4:	71fb      	strb	r3, [r7, #7]
	uartCFG.PayLoad_Length = UART_PayLoad_Length_8B;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71bb      	strb	r3, [r7, #6]
	uartCFG.StopBits = UART_StopBits_1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	723b      	strb	r3, [r7, #8]
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 80001ee:	230c      	movs	r3, #12
 80001f0:	713b      	strb	r3, [r7, #4]


	MCAL_UART_Init(USART1, &uartCFG);
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4619      	mov	r1, r3
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x40>)
 80001f8:	f000 fa1e 	bl	8000638 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001fc:	4802      	ldr	r0, [pc, #8]	; (8000208 <main+0x40>)
 80001fe:	f000 fb31 	bl	8000864 <MCAL_UART_GPIO_Set_Pins>

	while(1){
 8000202:	e7fe      	b.n	8000202 <main+0x3a>
 8000204:	080001a5 	.word	0x080001a5
 8000208:	40013800 	.word	0x40013800

0800020c <Reset_Handler>:
 800020c:	480d      	ldr	r0, [pc, #52]	; (8000244 <LoopForever+0x2>)
 800020e:	4685      	mov	sp, r0
 8000210:	f3af 8000 	nop.w
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <LoopForever+0x6>)
 8000216:	490d      	ldr	r1, [pc, #52]	; (800024c <LoopForever+0xa>)
 8000218:	4a0d      	ldr	r2, [pc, #52]	; (8000250 <LoopForever+0xe>)
 800021a:	2300      	movs	r3, #0
 800021c:	e002      	b.n	8000224 <LoopCopyDataInit>

0800021e <CopyDataInit>:
 800021e:	58d4      	ldr	r4, [r2, r3]
 8000220:	50c4      	str	r4, [r0, r3]
 8000222:	3304      	adds	r3, #4

08000224 <LoopCopyDataInit>:
 8000224:	18c4      	adds	r4, r0, r3
 8000226:	428c      	cmp	r4, r1
 8000228:	d3f9      	bcc.n	800021e <CopyDataInit>
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <LoopForever+0x12>)
 800022c:	4c0a      	ldr	r4, [pc, #40]	; (8000258 <LoopForever+0x16>)
 800022e:	2300      	movs	r3, #0
 8000230:	e001      	b.n	8000236 <LoopFillZerobss>

08000232 <FillZerobss>:
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	3204      	adds	r2, #4

08000236 <LoopFillZerobss>:
 8000236:	42a2      	cmp	r2, r4
 8000238:	d3fb      	bcc.n	8000232 <FillZerobss>
 800023a:	f000 fb97 	bl	800096c <__libc_init_array>
 800023e:	f7ff ffc3 	bl	80001c8 <main>

08000242 <LoopForever>:
 8000242:	e7fe      	b.n	8000242 <LoopForever>
 8000244:	20002800 	.word	0x20002800
 8000248:	20000000 	.word	0x20000000
 800024c:	20000000 	.word	0x20000000
 8000250:	080009ec 	.word	0x080009ec
 8000254:	20000000 	.word	0x20000000
 8000258:	20000060 	.word	0x20000060

0800025c <ADC1_2_IRQHandler>:
 800025c:	e7fe      	b.n	800025c <ADC1_2_IRQHandler>

0800025e <Get_CRLH_Position>:
//#define Get_CRLH_Position(PinNumber)  ((PinNumber < GPIO_PIN_8) ?(4 * PinNumber) : (4 * (PinNumber-GPIO_PIN_8)))



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	4603      	mov	r3, r0
 8000266:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	2b80      	cmp	r3, #128	; 0x80
 800026c:	d042      	beq.n	80002f4 <Get_CRLH_Position+0x96>
 800026e:	2b80      	cmp	r3, #128	; 0x80
 8000270:	dc11      	bgt.n	8000296 <Get_CRLH_Position+0x38>
 8000272:	2b08      	cmp	r3, #8
 8000274:	d036      	beq.n	80002e4 <Get_CRLH_Position+0x86>
 8000276:	2b08      	cmp	r3, #8
 8000278:	dc06      	bgt.n	8000288 <Get_CRLH_Position+0x2a>
 800027a:	2b02      	cmp	r3, #2
 800027c:	d02e      	beq.n	80002dc <Get_CRLH_Position+0x7e>
 800027e:	2b04      	cmp	r3, #4
 8000280:	d02e      	beq.n	80002e0 <Get_CRLH_Position+0x82>
 8000282:	2b01      	cmp	r3, #1
 8000284:	d028      	beq.n	80002d8 <Get_CRLH_Position+0x7a>
 8000286:	e047      	b.n	8000318 <Get_CRLH_Position+0xba>
 8000288:	2b20      	cmp	r3, #32
 800028a:	d02f      	beq.n	80002ec <Get_CRLH_Position+0x8e>
 800028c:	2b40      	cmp	r3, #64	; 0x40
 800028e:	d02f      	beq.n	80002f0 <Get_CRLH_Position+0x92>
 8000290:	2b10      	cmp	r3, #16
 8000292:	d029      	beq.n	80002e8 <Get_CRLH_Position+0x8a>
 8000294:	e040      	b.n	8000318 <Get_CRLH_Position+0xba>
 8000296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800029a:	d033      	beq.n	8000304 <Get_CRLH_Position+0xa6>
 800029c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002a0:	dc09      	bgt.n	80002b6 <Get_CRLH_Position+0x58>
 80002a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002a6:	d029      	beq.n	80002fc <Get_CRLH_Position+0x9e>
 80002a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002ac:	d028      	beq.n	8000300 <Get_CRLH_Position+0xa2>
 80002ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002b2:	d021      	beq.n	80002f8 <Get_CRLH_Position+0x9a>
 80002b4:	e030      	b.n	8000318 <Get_CRLH_Position+0xba>
 80002b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002ba:	d027      	beq.n	800030c <Get_CRLH_Position+0xae>
 80002bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002c0:	dc03      	bgt.n	80002ca <Get_CRLH_Position+0x6c>
 80002c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002c6:	d01f      	beq.n	8000308 <Get_CRLH_Position+0xaa>
 80002c8:	e026      	b.n	8000318 <Get_CRLH_Position+0xba>
 80002ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002ce:	d01f      	beq.n	8000310 <Get_CRLH_Position+0xb2>
 80002d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002d4:	d01e      	beq.n	8000314 <Get_CRLH_Position+0xb6>
 80002d6:	e01f      	b.n	8000318 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80002d8:	2300      	movs	r3, #0
 80002da:	e01e      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80002dc:	2304      	movs	r3, #4
 80002de:	e01c      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 80002e0:	2308      	movs	r3, #8
 80002e2:	e01a      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 80002e4:	230c      	movs	r3, #12
 80002e6:	e018      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80002e8:	2310      	movs	r3, #16
 80002ea:	e016      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80002ec:	2314      	movs	r3, #20
 80002ee:	e014      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80002f0:	2318      	movs	r3, #24
 80002f2:	e012      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80002f4:	231c      	movs	r3, #28
 80002f6:	e010      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 80002f8:	2300      	movs	r3, #0
 80002fa:	e00e      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80002fc:	2304      	movs	r3, #4
 80002fe:	e00c      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000300:	2308      	movs	r3, #8
 8000302:	e00a      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000304:	230c      	movs	r3, #12
 8000306:	e008      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000308:	2310      	movs	r3, #16
 800030a:	e006      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800030c:	2314      	movs	r3, #20
 800030e:	e004      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000310:	2318      	movs	r3, #24
 8000312:	e002      	b.n	800031a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000314:	231c      	movs	r3, #28
 8000316:	e000      	b.n	800031a <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 8000318:	2300      	movs	r3, #0
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <MCAL_GPIO_Init>:
* Note					-stm32f103c6 MCU has GPIO A,B,C,D,E Modules
* 						 but LQFP48 Package has only Gpio A,B part of C/D exported as external pins from the MCU
*/

void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PinConfig_t * PinConfig)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configure PINS from 8 >>> 15

	volatile uint32_t* configregister = NULL;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
	uint8_t  PIN_Config = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	2bff      	cmp	r3, #255	; 0xff
 800033c:	d801      	bhi.n	8000342 <MCAL_GPIO_Init+0x1e>
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	e001      	b.n	8000346 <MCAL_GPIO_Init+0x22>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3304      	adds	r3, #4
 8000346:	60bb      	str	r3, [r7, #8]
	//Clear CNF[1:0] MODE[1;0]
	(*configregister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff86 	bl	800025e <Get_CRLH_Position>
 8000352:	4603      	mov	r3, r0
 8000354:	461a      	mov	r2, r3
 8000356:	230f      	movs	r3, #15
 8000358:	4093      	lsls	r3, r2
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	401a      	ands	r2, r3
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	789b      	ldrb	r3, [r3, #2]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d00b      	beq.n	8000386 <MCAL_GPIO_Init+0x62>
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	789b      	ldrb	r3, [r3, #2]
 8000372:	2b06      	cmp	r3, #6
 8000374:	d007      	beq.n	8000386 <MCAL_GPIO_Init+0x62>
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	789b      	ldrb	r3, [r3, #2]
 800037a:	2b05      	cmp	r3, #5
 800037c:	d003      	beq.n	8000386 <MCAL_GPIO_Init+0x62>
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	789b      	ldrb	r3, [r3, #2]
 8000382:	2b04      	cmp	r3, #4
 8000384:	d10e      	bne.n	80003a4 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1;0]
		PIN_Config =  ((((PinConfig->GPIO_MODE- 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	789b      	ldrb	r3, [r3, #2]
 800038a:	3b04      	subs	r3, #4
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	b25a      	sxtb	r2, r3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	b25b      	sxtb	r3, r3
 8000396:	4313      	orrs	r3, r2
 8000398:	b25b      	sxtb	r3, r3
 800039a:	b2db      	uxtb	r3, r3
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	73fb      	strb	r3, [r7, #15]
 80003a2:	e02c      	b.n	80003fe <MCAL_GPIO_Init+0xda>
	}
	else  // Mode = 0x00 inpute mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	789b      	ldrb	r3, [r3, #2]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <MCAL_GPIO_Init+0x90>
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d107      	bne.n	80003c4 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((PinConfig->GPIO_MODE ) << 2) | 0x00) & 0x0f );
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	e01c      	b.n	80003fe <MCAL_GPIO_Init+0xda>

		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))   // consider it as input floating
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	2b08      	cmp	r3, #8
 80003ca:	d102      	bne.n	80003d2 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((GPIO_MODE_INPUT_FLO ) << 2) | 0x0) & 0x0f );
 80003cc:	2304      	movs	r3, #4
 80003ce:	73fb      	strb	r3, [r7, #15]
 80003d0:	e015      	b.n	80003fe <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config =  ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0f );
 80003d2:	2308      	movs	r3, #8
 80003d4:	73fb      	strb	r3, [r7, #15]
			if( PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	789b      	ldrb	r3, [r3, #2]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d107      	bne.n	80003ee <MCAL_GPIO_Init+0xca>
			{

				//GPIOx->BSRR =   PinConfig->GPIO_PinNumber;
				GPIOx->ODR |=   PinConfig->GPIO_PinNumber;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	8812      	ldrh	r2, [r2, #0]
 80003e6:	431a      	orrs	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	e007      	b.n	80003fe <MCAL_GPIO_Init+0xda>

			}else
			{
			//	GPIOx->BRR &= ~ ( PinConfig->GPIO_PinNumber);
				GPIOx->ODR &= ~ ( PinConfig->GPIO_PinNumber);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	8812      	ldrh	r2, [r2, #0]
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	401a      	ands	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	60da      	str	r2, [r3, #12]

	}

	// write on CRL or CRH

	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003fe:	7bfc      	ldrb	r4, [r7, #15]
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff2a 	bl	800025e <Get_CRLH_Position>
 800040a:	4603      	mov	r3, r0
 800040c:	fa04 f203 	lsl.w	r2, r4, r3
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	431a      	orrs	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	601a      	str	r2, [r3, #0]

}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bd90      	pop	{r4, r7, pc}
	...

08000424 <EXTI0_IRQHandler>:
 * 							ISR FUNCTION
 * ==========================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<0;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <EXTI0_IRQHandler+0x1c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <EXTI0_IRQHandler+0x1c>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <EXTI0_IRQHandler+0x20>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4798      	blx	r3
	}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010400 	.word	0x40010400
 8000444:	20000024 	.word	0x20000024

08000448 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<1;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <EXTI1_IRQHandler+0x1c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <EXTI1_IRQHandler+0x1c>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[1]();
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <EXTI1_IRQHandler+0x20>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4798      	blx	r3
	}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40010400 	.word	0x40010400
 8000468:	20000024 	.word	0x20000024

0800046c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<2;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <EXTI2_IRQHandler+0x1c>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <EXTI2_IRQHandler+0x1c>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[2]();
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <EXTI2_IRQHandler+0x20>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4798      	blx	r3
	}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40010400 	.word	0x40010400
 800048c:	20000024 	.word	0x20000024

08000490 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<3;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <EXTI3_IRQHandler+0x1c>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <EXTI3_IRQHandler+0x1c>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[3]();
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <EXTI3_IRQHandler+0x20>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4798      	blx	r3
	}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40010400 	.word	0x40010400
 80004b0:	20000024 	.word	0x20000024

080004b4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<4;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <EXTI4_IRQHandler+0x1c>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <EXTI4_IRQHandler+0x1c>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[4]();
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <EXTI4_IRQHandler+0x20>)
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	4798      	blx	r3
	}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000024 	.word	0x20000024

080004d8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )  { EXTI->PR |= 1<<5;     GP_IRQ_CallBack[5](); }
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d008      	beq.n	80004fa <EXTI9_5_IRQHandler+0x22>
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a22      	ldr	r2, [pc, #136]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )  { EXTI->PR |= 1<<6;     GP_IRQ_CallBack[6](); }
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <EXTI9_5_IRQHandler+0x40>
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 800050c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4798      	blx	r3
	if(EXTI->PR & 1<<7 )  { EXTI->PR |= 1<<7;     GP_IRQ_CallBack[7](); }
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000520:	2b00      	cmp	r3, #0
 8000522:	d008      	beq.n	8000536 <EXTI9_5_IRQHandler+0x5e>
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 800052a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052e:	6153      	str	r3, [r2, #20]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )  { EXTI->PR |= 1<<8;     GP_IRQ_CallBack[8](); }
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800053e:	2b00      	cmp	r3, #0
 8000540:	d008      	beq.n	8000554 <EXTI9_5_IRQHandler+0x7c>
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 8000550:	6a1b      	ldr	r3, [r3, #32]
 8000552:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )  { EXTI->PR |= 1<<9;     GP_IRQ_CallBack[9](); }
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055c:	2b00      	cmp	r3, #0
 800055e:	d008      	beq.n	8000572 <EXTI9_5_IRQHandler+0x9a>
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800056a:	6153      	str	r3, [r2, #20]
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 800056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000570:	4798      	blx	r3
	}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40010400 	.word	0x40010400
 800057c:	20000024 	.word	0x20000024

08000580 <MCAL_RCC_GetPCLK1Freq>:
//110: HCLK divided by 8
//111: HCLK divided by 16

const uint8_t APBPrescTable[8U] ={0 ,0, 0, 0, 1,2,3,4};

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
 return	( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( ( RCC->CFGR >>8) & 0b111 )] );
 8000584:	f000 f824 	bl	80005d0 <MCAL_RCC_GetHCLKFreq>
 8000588:	4601      	mov	r1, r0
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	f003 0307 	and.w	r3, r3, #7
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	fa21 f303 	lsr.w	r3, r1, r3

}
 800059c:	4618      	mov	r0, r3
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	080009dc 	.word	0x080009dc

080005a8 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	 return	( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( ( RCC->CFGR >>11) & 0b111 )] );
 80005ac:	f000 f810 	bl	80005d0 <MCAL_RCC_GetHCLKFreq>
 80005b0:	4601      	mov	r1, r0
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	0adb      	lsrs	r3, r3, #11
 80005b8:	f003 0307 	and.w	r3, r3, #7
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005c4:	4618      	mov	r0, r3
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	080009dc 	.word	0x080009dc

080005d0 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	 return	( MCAL_RCC_GetSYSCLKFreq() >> SYSCLKPrescTable[ ( ( RCC->CFGR >>4) & 0xf )] );
 80005d4:	f000 f810 	bl	80005f8 <MCAL_RCC_GetSYSCLKFreq>
 80005d8:	4601      	mov	r1, r0
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	091b      	lsrs	r3, r3, #4
 80005e0:	f003 030f 	and.w	r3, r3, #15
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	080009cc 	.word	0x080009cc

080005f8 <MCAL_RCC_GetSYSCLKFreq>:
uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

//	Bits 3:2 SWS[1:0]: System clock switch status
	switch((  ( RCC->CFGR >>2) & 0b11  )){
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	2b01      	cmp	r3, #1
 8000608:	d006      	beq.n	8000618 <MCAL_RCC_GetSYSCLKFreq+0x20>
 800060a:	2b01      	cmp	r3, #1
 800060c:	d302      	bcc.n	8000614 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 800060e:	2b02      	cmp	r3, #2
 8000610:	d004      	beq.n	800061c <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000612:	e005      	b.n	8000620 <MCAL_RCC_GetSYSCLKFreq+0x28>

	case 0:
		return HSI_RC_CLK ;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000616:	e004      	b.n	8000622 <MCAL_RCC_GetSYSCLKFreq+0x2a>
		break;

	case 1:
		//to do //user should specify
		return HSE_CLK ;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 800061a:	e002      	b.n	8000622 <MCAL_RCC_GetSYSCLKFreq+0x2a>
		break;
	case 2 :
		//to do need to calculate pll
		return 16000000 ;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 800061e:	e000      	b.n	8000622 <MCAL_RCC_GetSYSCLKFreq+0x2a>
		break;
	}
	return HSI_RC_CLK;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <MCAL_RCC_GetSYSCLKFreq+0x38>)
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	007a1200 	.word	0x007a1200
 8000634:	00f42400 	.word	0x00f42400

08000638 <MCAL_UART_Init>:
* Note					- Now Support ASYNCH mode and Clock 8Mhz
*/
/**================================================================*/


void MCAL_UART_Init(USART_TypeDef * USARTx, UART_Config * UART_cnfg){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]

	uint32_t pclk , BRR;
	Global_UART_Config = UART_cnfg;
 8000642:	4a5c      	ldr	r2, [pc, #368]	; (80007b4 <MCAL_UART_Init+0x17c>)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	6013      	str	r3, [r2, #0]

	if(USARTx == USART1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a5b      	ldr	r2, [pc, #364]	; (80007b8 <MCAL_UART_Init+0x180>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000650:	4b5a      	ldr	r3, [pc, #360]	; (80007bc <MCAL_UART_Init+0x184>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a59      	ldr	r2, [pc, #356]	; (80007bc <MCAL_UART_Init+0x184>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	e014      	b.n	8000688 <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a57      	ldr	r2, [pc, #348]	; (80007c0 <MCAL_UART_Init+0x188>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000666:	4b55      	ldr	r3, [pc, #340]	; (80007bc <MCAL_UART_Init+0x184>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a54      	ldr	r2, [pc, #336]	; (80007bc <MCAL_UART_Init+0x184>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	e009      	b.n	8000688 <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a53      	ldr	r2, [pc, #332]	; (80007c4 <MCAL_UART_Init+0x18c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d105      	bne.n	8000688 <MCAL_UART_Init+0x50>
			RCC_USART3_CLK_EN();
 800067c:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <MCAL_UART_Init+0x184>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a4e      	ldr	r2, [pc, #312]	; (80007bc <MCAL_UART_Init+0x184>)
 8000682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000686:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	60da      	str	r2, [r3, #12]
	//Enable TX and RX
	//Bit 3 TE: Transmitter enable
	//Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_cnfg->USART_Mode;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	431a      	orrs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60da      	str	r2, [r3, #12]
	//PAYLOAD Width
	USARTx->CR1 |= UART_cnfg->PayLoad_Length;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	7892      	ldrb	r2, [r2, #2]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	60da      	str	r2, [r3, #12]

	//Configuration of Parity control bit
	USARTx->CR1 |= UART_cnfg->Parity;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	78d2      	ldrb	r2, [r2, #3]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60da      	str	r2, [r3, #12]

	//Configure the number of stop bits
	USARTx->CR2 |= UART_cnfg->StopBits;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	691b      	ldr	r3, [r3, #16]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	7912      	ldrb	r2, [r2, #4]
 80006c6:	431a      	orrs	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	611a      	str	r2, [r3, #16]

	//USART hardware flowControl
	USARTx->CR3 |= UART_cnfg->HwFlowCtl;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	7952      	ldrb	r2, [r2, #5]
 80006d4:	431a      	orrs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	615a      	str	r2, [r3, #20]

	//configure of BRR(Baud Rate Register)
	//PCLK1 for USART2,3
	//PCLK2 for USART1

	if(USARTx == USART1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a36      	ldr	r2, [pc, #216]	; (80007b8 <MCAL_UART_Init+0x180>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d103      	bne.n	80006ea <MCAL_UART_Init+0xb2>
		pclk = MCAL_RCC_GetPCLK2Freq();
 80006e2:	f7ff ff61 	bl	80005a8 <MCAL_RCC_GetPCLK2Freq>
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	e00a      	b.n	8000700 <MCAL_UART_Init+0xc8>
	else if(USARTx == USART2 || USARTx == USART3)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <MCAL_UART_Init+0x188>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d003      	beq.n	80006fa <MCAL_UART_Init+0xc2>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <MCAL_UART_Init+0x18c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d102      	bne.n	8000700 <MCAL_UART_Init+0xc8>
			pclk = MCAL_RCC_GetPCLK1Freq();
 80006fa:	f7ff ff41 	bl	8000580 <MCAL_RCC_GetPCLK1Freq>
 80006fe:	60f8      	str	r0, [r7, #12]
	BRR = UART_BRR_Register(pclk,UART_cnfg->BaudRate);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	fbb3 f3f2 	udiv	r3, r3, r2
 800070e:	0119      	lsls	r1, r3, #4
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	009a      	lsls	r2, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	7852      	ldrb	r2, [r2, #1]
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	fbb3 f2f2 	udiv	r2, r3, r2
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	4618      	mov	r0, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	fbb3 f3f0 	udiv	r3, r3, r0
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	fb00 f303 	mul.w	r3, r0, r3
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MCAL_UART_Init+0x190>)
 8000740:	fba2 2303 	umull	r2, r3, r2, r3
 8000744:	095b      	lsrs	r3, r3, #5
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	430b      	orrs	r3, r1
 800074c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	609a      	str	r2, [r3, #8]

	//Enable / Disable Interrupt
	if(UART_cnfg->IRQ_Enable != UART_IRQ_Enable_NONE){
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	799b      	ldrb	r3, [r3, #6]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d026      	beq.n	80007aa <MCAL_UART_Init+0x172>

		USARTx->CR1 |= UART_cnfg->IRQ_Enable ;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	7992      	ldrb	r2, [r2, #6]
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60da      	str	r2, [r3, #12]

		//Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MCAL_UART_Init+0x180>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <MCAL_UART_Init+0x148>
			NVIC_IRQ37_USART1_Enable;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MCAL_UART_Init+0x194>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MCAL_UART_Init+0x194>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;
		else if(USARTx == USART3)
			 NVIC_IRQ39_USART3_Enable;

	}
}
 800077e:	e014      	b.n	80007aa <MCAL_UART_Init+0x172>
		else if(USARTx == USART2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <MCAL_UART_Init+0x188>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <MCAL_UART_Init+0x15e>
			NVIC_IRQ38_USART2_Enable;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MCAL_UART_Init+0x194>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <MCAL_UART_Init+0x194>)
 800078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	e009      	b.n	80007aa <MCAL_UART_Init+0x172>
		else if(USARTx == USART3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <MCAL_UART_Init+0x18c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d105      	bne.n	80007aa <MCAL_UART_Init+0x172>
			 NVIC_IRQ39_USART3_Enable;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MCAL_UART_Init+0x194>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <MCAL_UART_Init+0x194>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000001c 	.word	0x2000001c
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40004400 	.word	0x40004400
 80007c4:	40004800 	.word	0x40004800
 80007c8:	51eb851f 	.word	0x51eb851f
 80007cc:	e000e104 	.word	0xe000e104

080007d0 <MCAL_UART_SendData>:
							//because it is replaced by the parity.
							//When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
*/
/**================================================================*/
void MCAL_UART_SendData(USART_TypeDef * USARTx, uint16_t * pTxBuffer, enum Polling_mechanism  PollingEn)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	4613      	mov	r3, r2
 80007dc:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == enable){
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d106      	bne.n	80007f2 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 80007e4:	bf00      	nop
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f9      	beq.n	80007e6 <MCAL_UART_SendData+0x16>
	//check usart wordlength item for 9 bit or 8 bit

	if(Global_UART_Config->PayLoad_Length == UART_PayLoad_Length_9B){
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x01ff);
	}else{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0xff);
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	605a      	str	r2, [r3, #4]
	}

}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
	...

08000808 <MCAL_UART_ReceivData>:
void MCAL_UART_Wait_TC(USART_TypeDef * USARTx){
	while(!(USARTx->SR & 1<<6));
}


void MCAL_UART_ReceivData(USART_TypeDef * USARTx, uint16_t * pRxBuffer, enum Polling_mechanism  PollingEn){
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	4613      	mov	r3, r2
 8000814:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE flag is set in the SR
	if(PollingEn == enable){
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <MCAL_UART_ReceivData+0x22>
			while(!(USARTx->SR & 1<<5));
 800081c:	bf00      	nop
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f9      	beq.n	800081e <MCAL_UART_ReceivData+0x16>
			//parity is used so 8 bit will be of user data and 1 for parity
			*((uint16_t *)pRxBuffer) = (USARTx->DR  & (uint8_t)0xff);
		}
	}else{

		if(Global_UART_Config->Parity == UART_Parity_NONE){
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MCAL_UART_ReceivData+0x58>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	78db      	ldrb	r3, [r3, #3]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <MCAL_UART_ReceivData+0x3c>
					//no parity so all 8bits are considered data
			*((uint16_t *)pRxBuffer) = (USARTx->DR  & (uint8_t)0xff);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	b29b      	uxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	801a      	strh	r2, [r3, #0]
					*((uint16_t *)pRxBuffer) = (USARTx->DR  & (uint8_t)0x7f);
				}

	}

}
 8000842:	e007      	b.n	8000854 <MCAL_UART_ReceivData+0x4c>
					*((uint16_t *)pRxBuffer) = (USARTx->DR  & (uint8_t)0x7f);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	b29b      	uxth	r3, r3
 800084a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800084e:	b29a      	uxth	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	801a      	strh	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000001c 	.word	0x2000001c

08000864 <MCAL_UART_GPIO_Set_Pins>:
* @param [in] 			- USARTx : where x can be (1,2,3,.. depending on device used)
* @retval 				- none
* Note					- Now Support ASYNCH mode and Clock 8Mhz
*/
/**================================================================*/
void MCAL_UART_GPIO_Set_Pins(USART_TypeDef * USARTx){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t pinCnfg;

	if(USARTx == USART1){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a2b      	ldr	r2, [pc, #172]	; (800091c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d118      	bne.n	80008a6 <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pinCnfg.GPIO_PinNumber = GPIO_PIN_9;
 8000874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000878:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800087a:	2306      	movs	r3, #6
 800087c:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed= GPIO_SPEED_10M;
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCnfg);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4825      	ldr	r0, [pc, #148]	; (8000920 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800088a:	f7ff fd4b 	bl	8000324 <MCAL_GPIO_Init>

		//PA10 RX
		pinCnfg.GPIO_PinNumber = GPIO_PIN_10;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000894:	2308      	movs	r3, #8
 8000896:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCnfg);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4820      	ldr	r0, [pc, #128]	; (8000920 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008a0:	f7ff fd40 	bl	8000324 <MCAL_GPIO_Init>

					}


		}
}
 80008a4:	e036      	b.n	8000914 <MCAL_UART_GPIO_Set_Pins+0xb0>
		}else if(USARTx == USART2){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d116      	bne.n	80008dc <MCAL_UART_GPIO_Set_Pins+0x78>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_2;
 80008ae:	2304      	movs	r3, #4
 80008b0:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008b2:	2307      	movs	r3, #7
 80008b4:	73bb      	strb	r3, [r7, #14]
					pinCnfg.GPIO_Output_Speed= GPIO_SPEED_10M;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOA, &pinCnfg);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4817      	ldr	r0, [pc, #92]	; (8000920 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008c2:	f7ff fd2f 	bl	8000324 <MCAL_GPIO_Init>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_3;
 80008c6:	2308      	movs	r3, #8
 80008c8:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80008ca:	2308      	movs	r3, #8
 80008cc:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &pinCnfg);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008d6:	f7ff fd25 	bl	8000324 <MCAL_GPIO_Init>
}
 80008da:	e01b      	b.n	8000914 <MCAL_UART_GPIO_Set_Pins+0xb0>
		}else if(USARTx == USART3){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d117      	bne.n	8000914 <MCAL_UART_GPIO_Set_Pins+0xb0>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_10;
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008ea:	2307      	movs	r3, #7
 80008ec:	73bb      	strb	r3, [r7, #14]
					pinCnfg.GPIO_Output_Speed= GPIO_SPEED_10M;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &pinCnfg);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008fa:	f7ff fd13 	bl	8000324 <MCAL_GPIO_Init>
					pinCnfg.GPIO_PinNumber = GPIO_PIN_11;
 80008fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000902:	81bb      	strh	r3, [r7, #12]
					pinCnfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000904:	2308      	movs	r3, #8
 8000906:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &pinCnfg);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000910:	f7ff fd08 	bl	8000324 <MCAL_GPIO_Init>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013800 	.word	0x40013800
 8000920:	40010800 	.word	0x40010800
 8000924:	40004400 	.word	0x40004400
 8000928:	40004800 	.word	0x40004800
 800092c:	40010c00 	.word	0x40010c00

08000930 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <USART1_IRQHandler+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	4798      	blx	r3

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000001c 	.word	0x2000001c

08000944 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <USART2_IRQHandler+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	4798      	blx	r3

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000001c 	.word	0x2000001c

08000958 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <USART3_IRQHandler+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	4798      	blx	r3

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000001c 	.word	0x2000001c

0800096c <__libc_init_array>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	2500      	movs	r5, #0
 8000970:	4e0c      	ldr	r6, [pc, #48]	; (80009a4 <__libc_init_array+0x38>)
 8000972:	4c0d      	ldr	r4, [pc, #52]	; (80009a8 <__libc_init_array+0x3c>)
 8000974:	1ba4      	subs	r4, r4, r6
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	42a5      	cmp	r5, r4
 800097a:	d109      	bne.n	8000990 <__libc_init_array+0x24>
 800097c:	f000 f81a 	bl	80009b4 <_init>
 8000980:	2500      	movs	r5, #0
 8000982:	4e0a      	ldr	r6, [pc, #40]	; (80009ac <__libc_init_array+0x40>)
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <__libc_init_array+0x44>)
 8000986:	1ba4      	subs	r4, r4, r6
 8000988:	10a4      	asrs	r4, r4, #2
 800098a:	42a5      	cmp	r5, r4
 800098c:	d105      	bne.n	800099a <__libc_init_array+0x2e>
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000994:	4798      	blx	r3
 8000996:	3501      	adds	r5, #1
 8000998:	e7ee      	b.n	8000978 <__libc_init_array+0xc>
 800099a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800099e:	4798      	blx	r3
 80009a0:	3501      	adds	r5, #1
 80009a2:	e7f2      	b.n	800098a <__libc_init_array+0x1e>
 80009a4:	080009e4 	.word	0x080009e4
 80009a8:	080009e4 	.word	0x080009e4
 80009ac:	080009e4 	.word	0x080009e4
 80009b0:	080009e8 	.word	0x080009e8

080009b4 <_init>:
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	bf00      	nop
 80009b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ba:	bc08      	pop	{r3}
 80009bc:	469e      	mov	lr, r3
 80009be:	4770      	bx	lr

080009c0 <_fini>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr
