
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e0c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000f3c  08000f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f5c  08000f5c  00010f64  2**0
                  CONTENTS
  4 .ARM          00000000  08000f5c  08000f5c  00010f64  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f5c  08000f64  00010f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08000f64  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08000f64  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f64  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006de1  00000000  00000000  00010f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001082  00000000  00000000  00017d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013b2  00000000  00000000  00018df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f8  00000000  00000000  0001a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000270  00000000  00000000  0001a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003191  00000000  00000000  0001a710  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003c32  00000000  00000000  0001d8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c465  00000000  00000000  000214d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009ec  00000000  00000000  0002d9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f24 	.word	0x08000f24

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f24 	.word	0x08000f24

08000170 <eeprom_init>:
 */

#include "../inc/I2C_Slave_EEPROM.h"

void eeprom_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0

	I2C_Config I2C_CFG;

	//I2C Controller ACT AS A  MASTER

	I2C_CFG.General_Call_Address_Detection = I2C_General_Call_Address_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C_CFG.I2C_ACK_Control = I2C_Ack_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C_CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_CFG.I2C_Mode = I2C_mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C_CFG.Stretch_Mode = I2C_Stretch_Mode_Enable;
 8000188:	2300      	movs	r3, #0
 800018a:	60bb      	str	r3, [r7, #8]
	I2C_CFG.P_Slave_Event_CallBack = NULL;
 800018c:	2300      	movs	r3, #0
 800018e:	627b      	str	r3, [r7, #36]	; 0x24


	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fba1 	bl	80008d8 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fa98 	bl	80006d0 <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:

unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char *bytes, uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_address>>8);   //upper Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_address);		//Lower Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for( i =2 ; i< (Data_Length+2) ; i++){
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <eeprom_write_Nbytes+0x66>

		buffer[i]= bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for( i =2 ; i< (Data_Length+2) ; i++){
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <eeprom_write_Nbytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, Data_Length+2, WithStop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <eeprom_write_Nbytes+0xa0>)
 800023e:	f000 fb8f 	bl	8000960 <MCAL_I2C_Master_TX>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <eeprom_read_byte>:
unsigned char eeprom_read_byte(unsigned int address, unsigned char *dataOut, uint8_t dataLen)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]

	uint8_t i=0;
 8000262:	2300      	movs	r3, #0
 8000264:	75fb      	strb	r3, [r7, #23]
		uint8_t buffer[2];
		buffer[0] = (uint8_t)(address>>8);   //upper Memory Address
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	b2db      	uxtb	r3, r3
 800026c:	753b      	strb	r3, [r7, #20]
		buffer[1] = (uint8_t)(address);		//Lower Memory Address
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	757b      	strb	r3, [r7, #21]


		MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, WithoutStop, Start);
 8000274:	f107 0214 	add.w	r2, r7, #20
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2301      	movs	r3, #1
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2302      	movs	r3, #2
 8000282:	212a      	movs	r1, #42	; 0x2a
 8000284:	4809      	ldr	r0, [pc, #36]	; (80002ac <eeprom_read_byte+0x58>)
 8000286:	f000 fb6b 	bl	8000960 <MCAL_I2C_Master_TX>
		MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, dataOut, dataLen, WithStop, RepeatedSart);
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	2301      	movs	r3, #1
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2300      	movs	r3, #0
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	68ba      	ldr	r2, [r7, #8]
 8000298:	212a      	movs	r1, #42	; 0x2a
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <eeprom_read_byte+0x58>)
 800029c:	f000 fbbe 	bl	8000a1c <MCAL_I2C_Master_RX>

		return 0;
 80002a0:	2300      	movs	r3, #0

}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40005400 	.word	0x40005400

080002b0 <clock_init>:



	uint16_t ch;

void clock_init(){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <clock_init+0x30>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <clock_init+0x30>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <clock_init+0x30>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <clock_init+0x30>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <clock_init+0x30>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <clock_init+0x30>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6193      	str	r3, [r2, #24]

}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000

080002e4 <main>:




int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	clock_init();
 80002ea:	f7ff ffe1 	bl	80002b0 <clock_init>


//test case1
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80002ee:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <main+0x74>)
 80002f0:	f107 0308 	add.w	r3, r7, #8
 80002f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f8:	6018      	str	r0, [r3, #0]
 80002fa:	3304      	adds	r3, #4
 80002fc:	8019      	strh	r1, [r3, #0]
 80002fe:	3302      	adds	r3, #2
 8000300:	0c0a      	lsrs	r2, r1, #16
 8000302:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	f8c3 2003 	str.w	r2, [r3, #3]

	eeprom_init();
 800030e:	f7ff ff2f 	bl	8000170 <eeprom_init>
	eeprom_write_Nbytes(0xAF, ch1, 7);
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	2207      	movs	r2, #7
 8000318:	4619      	mov	r1, r3
 800031a:	20af      	movs	r0, #175	; 0xaf
 800031c:	f7ff ff48 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xAF, ch2, 7);
 8000320:	463b      	mov	r3, r7
 8000322:	2207      	movs	r2, #7
 8000324:	4619      	mov	r1, r3
 8000326:	20af      	movs	r0, #175	; 0xaf
 8000328:	f7ff ff94 	bl	8000254 <eeprom_read_byte>

//test case2
	ch1[0] = 0xA;
 800032c:	230a      	movs	r3, #10
 800032e:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000330:	230b      	movs	r3, #11
 8000332:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000334:	230c      	movs	r3, #12
 8000336:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000338:	230d      	movs	r3, #13
 800033a:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFF, ch1, 4);
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2204      	movs	r2, #4
 8000342:	4619      	mov	r1, r3
 8000344:	20ff      	movs	r0, #255	; 0xff
 8000346:	f7ff ff33 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xff, ch2, 4);
 800034a:	463b      	mov	r3, r7
 800034c:	2204      	movs	r2, #4
 800034e:	4619      	mov	r1, r3
 8000350:	20ff      	movs	r0, #255	; 0xff
 8000352:	f7ff ff7f 	bl	8000254 <eeprom_read_byte>




	while(1){
 8000356:	e7fe      	b.n	8000356 <main+0x72>
 8000358:	08000f3c 	.word	0x08000f3c

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fda7 	bl	8000edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffa9 	bl	80002e4 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000f64 	.word	0x08000f64
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	200000ac 	.word	0x200000ac

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>

080003ae <Get_CRLH_Position>:
//#define Get_CRLH_Position(PinNumber)  ((PinNumber < GPIO_PIN_8) ?(4 * PinNumber) : (4 * (PinNumber-GPIO_PIN_8)))



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b083      	sub	sp, #12
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	4603      	mov	r3, r0
 80003b6:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80003b8:	88fb      	ldrh	r3, [r7, #6]
 80003ba:	2b80      	cmp	r3, #128	; 0x80
 80003bc:	d042      	beq.n	8000444 <Get_CRLH_Position+0x96>
 80003be:	2b80      	cmp	r3, #128	; 0x80
 80003c0:	dc11      	bgt.n	80003e6 <Get_CRLH_Position+0x38>
 80003c2:	2b08      	cmp	r3, #8
 80003c4:	d036      	beq.n	8000434 <Get_CRLH_Position+0x86>
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	dc06      	bgt.n	80003d8 <Get_CRLH_Position+0x2a>
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d02e      	beq.n	800042c <Get_CRLH_Position+0x7e>
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d02e      	beq.n	8000430 <Get_CRLH_Position+0x82>
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d028      	beq.n	8000428 <Get_CRLH_Position+0x7a>
 80003d6:	e047      	b.n	8000468 <Get_CRLH_Position+0xba>
 80003d8:	2b20      	cmp	r3, #32
 80003da:	d02f      	beq.n	800043c <Get_CRLH_Position+0x8e>
 80003dc:	2b40      	cmp	r3, #64	; 0x40
 80003de:	d02f      	beq.n	8000440 <Get_CRLH_Position+0x92>
 80003e0:	2b10      	cmp	r3, #16
 80003e2:	d029      	beq.n	8000438 <Get_CRLH_Position+0x8a>
 80003e4:	e040      	b.n	8000468 <Get_CRLH_Position+0xba>
 80003e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003ea:	d033      	beq.n	8000454 <Get_CRLH_Position+0xa6>
 80003ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f0:	dc09      	bgt.n	8000406 <Get_CRLH_Position+0x58>
 80003f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003f6:	d029      	beq.n	800044c <Get_CRLH_Position+0x9e>
 80003f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003fc:	d028      	beq.n	8000450 <Get_CRLH_Position+0xa2>
 80003fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000402:	d021      	beq.n	8000448 <Get_CRLH_Position+0x9a>
 8000404:	e030      	b.n	8000468 <Get_CRLH_Position+0xba>
 8000406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800040a:	d027      	beq.n	800045c <Get_CRLH_Position+0xae>
 800040c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000410:	dc03      	bgt.n	800041a <Get_CRLH_Position+0x6c>
 8000412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000416:	d01f      	beq.n	8000458 <Get_CRLH_Position+0xaa>
 8000418:	e026      	b.n	8000468 <Get_CRLH_Position+0xba>
 800041a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800041e:	d01f      	beq.n	8000460 <Get_CRLH_Position+0xb2>
 8000420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000424:	d01e      	beq.n	8000464 <Get_CRLH_Position+0xb6>
 8000426:	e01f      	b.n	8000468 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000428:	2300      	movs	r3, #0
 800042a:	e01e      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800042c:	2304      	movs	r3, #4
 800042e:	e01c      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 8000430:	2308      	movs	r3, #8
 8000432:	e01a      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000434:	230c      	movs	r3, #12
 8000436:	e018      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000438:	2310      	movs	r3, #16
 800043a:	e016      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800043c:	2314      	movs	r3, #20
 800043e:	e014      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000440:	2318      	movs	r3, #24
 8000442:	e012      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000444:	231c      	movs	r3, #28
 8000446:	e010      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 8000448:	2300      	movs	r3, #0
 800044a:	e00e      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800044c:	2304      	movs	r3, #4
 800044e:	e00c      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000450:	2308      	movs	r3, #8
 8000452:	e00a      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000454:	230c      	movs	r3, #12
 8000456:	e008      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000458:	2310      	movs	r3, #16
 800045a:	e006      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800045c:	2314      	movs	r3, #20
 800045e:	e004      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000460:	2318      	movs	r3, #24
 8000462:	e002      	b.n	800046a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000464:	231c      	movs	r3, #28
 8000466:	e000      	b.n	800046a <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 8000468:	2300      	movs	r3, #0
}
 800046a:	4618      	mov	r0, r3
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <MCAL_GPIO_Init>:
* Note					-stm32f103c6 MCU has GPIO A,B,C,D,E Modules
* 						 but LQFP48 Package has only Gpio A,B part of C/D exported as external pins from the MCU
*/

void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PinConfig_t * PinConfig)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configure PINS from 8 >>> 15

	volatile uint32_t* configregister = NULL;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
	uint8_t  PIN_Config = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d801      	bhi.n	8000492 <MCAL_GPIO_Init+0x1e>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	e001      	b.n	8000496 <MCAL_GPIO_Init+0x22>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3304      	adds	r3, #4
 8000496:	60bb      	str	r3, [r7, #8]
	//Clear CNF[1:0] MODE[1;0]
	(*configregister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff86 	bl	80003ae <Get_CRLH_Position>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	230f      	movs	r3, #15
 80004a8:	4093      	lsls	r3, r2
 80004aa:	43da      	mvns	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	401a      	ands	r2, r3
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	789b      	ldrb	r3, [r3, #2]
 80004ba:	2b07      	cmp	r3, #7
 80004bc:	d00b      	beq.n	80004d6 <MCAL_GPIO_Init+0x62>
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	789b      	ldrb	r3, [r3, #2]
 80004c2:	2b06      	cmp	r3, #6
 80004c4:	d007      	beq.n	80004d6 <MCAL_GPIO_Init+0x62>
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	789b      	ldrb	r3, [r3, #2]
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d003      	beq.n	80004d6 <MCAL_GPIO_Init+0x62>
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	789b      	ldrb	r3, [r3, #2]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d10e      	bne.n	80004f4 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1;0]
		PIN_Config =  ((((PinConfig->GPIO_MODE- 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	3b04      	subs	r3, #4
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	78db      	ldrb	r3, [r3, #3]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e02c      	b.n	800054e <MCAL_GPIO_Init+0xda>
	}
	else  // Mode = 0x00 inpute mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d003      	beq.n	8000504 <MCAL_GPIO_Init+0x90>
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d107      	bne.n	8000514 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((PinConfig->GPIO_MODE ) << 2) | 0x00) & 0x0f );
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	789b      	ldrb	r3, [r3, #2]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f003 030f 	and.w	r3, r3, #15
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e01c      	b.n	800054e <MCAL_GPIO_Init+0xda>

		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))   // consider it as input floating
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	789b      	ldrb	r3, [r3, #2]
 8000518:	2b08      	cmp	r3, #8
 800051a:	d102      	bne.n	8000522 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((GPIO_MODE_INPUT_FLO ) << 2) | 0x0) & 0x0f );
 800051c:	2304      	movs	r3, #4
 800051e:	73fb      	strb	r3, [r7, #15]
 8000520:	e015      	b.n	800054e <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config =  ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0f );
 8000522:	2308      	movs	r3, #8
 8000524:	73fb      	strb	r3, [r7, #15]
			if( PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	789b      	ldrb	r3, [r3, #2]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d107      	bne.n	800053e <MCAL_GPIO_Init+0xca>
			{

				//GPIOx->BSRR =   PinConfig->GPIO_PinNumber;
				GPIOx->ODR |=   PinConfig->GPIO_PinNumber;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	8812      	ldrh	r2, [r2, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	e007      	b.n	800054e <MCAL_GPIO_Init+0xda>

			}else
			{
			//	GPIOx->BRR &= ~ ( PinConfig->GPIO_PinNumber);
				GPIOx->ODR &= ~ ( PinConfig->GPIO_PinNumber);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	8812      	ldrh	r2, [r2, #0]
 8000546:	43d2      	mvns	r2, r2
 8000548:	401a      	ands	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	60da      	str	r2, [r3, #12]

	}

	// write on CRL or CRH

	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800054e:	7bfc      	ldrb	r4, [r7, #15]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff2a 	bl	80003ae <Get_CRLH_Position>
 800055a:	4603      	mov	r3, r0
 800055c:	fa04 f203 	lsl.w	r2, r4, r3
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	431a      	orrs	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	601a      	str	r2, [r3, #0]

}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}
	...

08000574 <EXTI0_IRQHandler>:
 * 							ISR FUNCTION
 * ==========================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<0;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <EXTI0_IRQHandler+0x1c>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <EXTI0_IRQHandler+0x1c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <EXTI0_IRQHandler+0x20>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4798      	blx	r3
	}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40010400 	.word	0x40010400
 8000594:	20000070 	.word	0x20000070

08000598 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<1;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <EXTI1_IRQHandler+0x1c>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <EXTI1_IRQHandler+0x1c>)
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[1]();
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <EXTI1_IRQHandler+0x20>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4798      	blx	r3
	}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010400 	.word	0x40010400
 80005b8:	20000070 	.word	0x20000070

080005bc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<2;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <EXTI2_IRQHandler+0x1c>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <EXTI2_IRQHandler+0x1c>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[2]();
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <EXTI2_IRQHandler+0x20>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4798      	blx	r3
	}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40010400 	.word	0x40010400
 80005dc:	20000070 	.word	0x20000070

080005e0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<3;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <EXTI3_IRQHandler+0x1c>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <EXTI3_IRQHandler+0x1c>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[3]();
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <EXTI3_IRQHandler+0x20>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	4798      	blx	r3
	}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010400 	.word	0x40010400
 8000600:	20000070 	.word	0x20000070

08000604 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<4;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <EXTI4_IRQHandler+0x1c>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <EXTI4_IRQHandler+0x1c>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <EXTI4_IRQHandler+0x20>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4798      	blx	r3
	}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40010400 	.word	0x40010400
 8000624:	20000070 	.word	0x20000070

08000628 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )  { EXTI->PR |= 1<<5;     GP_IRQ_CallBack[5](); }
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <EXTI9_5_IRQHandler+0x22>
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	6153      	str	r3, [r2, #20]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <EXTI9_5_IRQHandler+0xa4>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )  { EXTI->PR |= 1<<6;     GP_IRQ_CallBack[6](); }
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000652:	2b00      	cmp	r3, #0
 8000654:	d008      	beq.n	8000668 <EXTI9_5_IRQHandler+0x40>
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800065c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <EXTI9_5_IRQHandler+0xa4>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4798      	blx	r3
	if(EXTI->PR & 1<<7 )  { EXTI->PR |= 1<<7;     GP_IRQ_CallBack[7](); }
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000670:	2b00      	cmp	r3, #0
 8000672:	d008      	beq.n	8000686 <EXTI9_5_IRQHandler+0x5e>
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 800067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067e:	6153      	str	r3, [r2, #20]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <EXTI9_5_IRQHandler+0xa4>)
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )  { EXTI->PR |= 1<<8;     GP_IRQ_CallBack[8](); }
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	2b00      	cmp	r3, #0
 8000690:	d008      	beq.n	80006a4 <EXTI9_5_IRQHandler+0x7c>
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 8000698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <EXTI9_5_IRQHandler+0xa4>)
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )  { EXTI->PR |= 1<<9;     GP_IRQ_CallBack[9](); }
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <EXTI9_5_IRQHandler+0x9a>
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ba:	6153      	str	r3, [r2, #20]
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <EXTI9_5_IRQHandler+0xa4>)
 80006be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c0:	4798      	blx	r3
	}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010400 	.word	0x40010400
 80006cc:	20000070 	.word	0x20000070

080006d0 <MCAL_I2C_Init>:
//* Note
 *
*/
/**================================================================*/
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config* I2C_Init_Struct)
{
 80006d0:	b5b0      	push	{r4, r5, r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg, freqReg;
	uint32_t pclk1 = 8000000;
 80006da:	4b77      	ldr	r3, [pc, #476]	; (80008b8 <MCAL_I2C_Init+0x1e8>)
 80006dc:	617b      	str	r3, [r7, #20]
	uint16_t result = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	827b      	strh	r3, [r7, #18]
	//Enable RCC
	if(I2Cx == I2C1){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a75      	ldr	r2, [pc, #468]	; (80008bc <MCAL_I2C_Init+0x1ec>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d110      	bne.n	800070c <MCAL_I2C_Init+0x3c>

		Global_I2C_Config[I2C1_Index] = *I2C_Init_Struct;
 80006ea:	4a75      	ldr	r2, [pc, #468]	; (80008c0 <MCAL_I2C_Init+0x1f0>)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	4614      	mov	r4, r2
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	682b      	ldr	r3, [r5, #0]
 80006fc:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80006fe:	4b71      	ldr	r3, [pc, #452]	; (80008c4 <MCAL_I2C_Init+0x1f4>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a70      	ldr	r2, [pc, #448]	; (80008c4 <MCAL_I2C_Init+0x1f4>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	e010      	b.n	800072e <MCAL_I2C_Init+0x5e>

	}else
	{
		Global_I2C_Config[I2C2_Index] = *I2C_Init_Struct;
 800070c:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <MCAL_I2C_Init+0x1f0>)
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000714:	4615      	mov	r5, r2
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8000722:	4b68      	ldr	r3, [pc, #416]	; (80008c4 <MCAL_I2C_Init+0x1f4>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a67      	ldr	r2, [pc, #412]	; (80008c4 <MCAL_I2C_Init+0x1f4>)
 8000728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800072c:	61d3      	str	r3, [r2, #28]

	}
	if(I2C_Init_Struct->I2C_Mode == I2C_mode_I2C)
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8089 	bne.w	800084a <MCAL_I2C_Init+0x17a>
	{
		/*-------------------------------------*/
		//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		tmpreg = I2Cx->CR2;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	823b      	strh	r3, [r7, #16]
		tmpreg &= ~(I2C_CR2_FREQ);
 800073e:	8a3b      	ldrh	r3, [r7, #16]
 8000740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000744:	823b      	strh	r3, [r7, #16]
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000746:	f000 fb3b 	bl	8000dc0 <MCAL_RCC_GetPCLK1Freq>
 800074a:	6178      	str	r0, [r7, #20]
		freqReg = (uint16_t)(pclk1 / 1000000);
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4a5e      	ldr	r2, [pc, #376]	; (80008c8 <MCAL_I2C_Init+0x1f8>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	0c9b      	lsrs	r3, r3, #18
 8000756:	81fb      	strh	r3, [r7, #14]
		tmpreg |= freqReg;
 8000758:	8a3a      	ldrh	r2, [r7, #16]
 800075a:	89fb      	ldrh	r3, [r7, #14]
 800075c:	4313      	orrs	r3, r2
 800075e:	823b      	strh	r3, [r7, #16]

		I2Cx->CR2 = tmpreg ;
 8000760:	8a3a      	ldrh	r2, [r7, #16]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	605a      	str	r2, [r3, #4]

		//Configure the rise time register
		/* disable the selected I2C */
		I2Cx->CR1 &=~(I2C_CR1_PE);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f023 0201 	bic.w	r2, r3, #1
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]

		tmpreg =0;
 8000772:	2300      	movs	r3, #0
 8000774:	823b      	strh	r3, [r7, #16]

		/* Configure Speed in Standard mode		 */

		if(I2C_Init_Struct->I2C_ClockSpeed == I2C_SCLK_SM_50K || I2C_Init_Struct->I2C_ClockSpeed == I2C_SCLK_SM_100K)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800077e:	4293      	cmp	r3, r2
 8000780:	d004      	beq.n	800078c <MCAL_I2C_Init+0xbc>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a51      	ldr	r2, [pc, #324]	; (80008cc <MCAL_I2C_Init+0x1fc>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d119      	bne.n	80007c0 <MCAL_I2C_Init+0xf0>
		{
			// Tclk/2 = CRR * Tpclk1
			//CRR = Fpclk1 / (2 * I2C_Clock_fre )

			result = (uint16_t)(pclk1 /( I2C_Init_Struct->I2C_ClockSpeed<<1  ) );
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	fbb2 f3f3 	udiv	r3, r2, r3
 8000798:	827b      	strh	r3, [r7, #18]
			tmpreg |= result;
 800079a:	8a3a      	ldrh	r2, [r7, #16]
 800079c:	8a7b      	ldrh	r3, [r7, #18]
 800079e:	4313      	orrs	r3, r2
 80007a0:	823b      	strh	r3, [r7, #16]

			/*Write to CRR*/
			I2Cx->CCR = tmpreg;
 80007a2:	8a3a      	ldrh	r2, [r7, #16]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	61da      	str	r2, [r3, #28]

			tmpreg = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	823b      	strh	r3, [r7, #16]
			/*--------------------------Configure the rise time register--------------*/
				//	Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
			result = (uint16_t)(freqReg )+1;
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	3301      	adds	r3, #1
 80007b0:	827b      	strh	r3, [r7, #18]
			tmpreg |= result;
 80007b2:	8a3a      	ldrh	r2, [r7, #16]
 80007b4:	8a7b      	ldrh	r3, [r7, #18]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	823b      	strh	r3, [r7, #16]
			/*Write to I2Cx->TRISE*/
			I2Cx->TRISE = tmpreg;
 80007ba:	8a3a      	ldrh	r2, [r7, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	621a      	str	r2, [r3, #32]
		{
			//Fast Mode Not Supported
		}

	/* Program the I2C_CR1 register to enable the peripheral*/
		tmpreg = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	823b      	strh	r3, [r7, #16]
		tmpreg = I2Cx->CR1;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	823b      	strh	r3, [r7, #16]

		tmpreg |=(uint16_t) (I2C_Init_Struct->I2C_ACK_Control) | (I2C_Init_Struct->General_Call_Address_Detection) | (I2C_Init_Struct->I2C_Mode) |(I2C_Init_Struct->Stretch_Mode);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	8a3b      	ldrh	r3, [r7, #16]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	823b      	strh	r3, [r7, #16]

		/*Write to I2Cx->CR1*/
		I2Cx->CR1 = tmpreg;
 80007f4:	8a3a      	ldrh	r2, [r7, #16]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	601a      	str	r2, [r3, #0]

		/* Program the I2C_OAR1 OAR2 registerl*/
		tmpreg=0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	823b      	strh	r3, [r7, #16]
		if(I2C_Init_Struct->S_I2C_Slave_Address.Enable_Dual_Address == 1)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	899b      	ldrh	r3, [r3, #12]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10d      	bne.n	8000822 <MCAL_I2C_Init+0x152>
		{
			tmpreg = I2C_OAR2_ENDUAL;
 8000806:	2301      	movs	r3, #1
 8000808:	823b      	strh	r3, [r7, #16]
			tmpreg |= I2C_Init_Struct->S_I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	8a1b      	ldrh	r3, [r3, #16]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	b21a      	sxth	r2, r3
 8000812:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	823b      	strh	r3, [r7, #16]
			I2Cx->OAR2 = tmpreg;
 800081c:	8a3a      	ldrh	r2, [r7, #16]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60da      	str	r2, [r3, #12]
		}
		tmpreg=0;
 8000822:	2300      	movs	r3, #0
 8000824:	823b      	strh	r3, [r7, #16]
		tmpreg |= I2C_Init_Struct->S_I2C_Slave_Address.Primary_Slave_Address << 1;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	89db      	ldrh	r3, [r3, #14]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	b21a      	sxth	r2, r3
 800082e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000832:	4313      	orrs	r3, r2
 8000834:	b21b      	sxth	r3, r3
 8000836:	823b      	strh	r3, [r7, #16]
		tmpreg |= I2C_Init_Struct->S_I2C_Slave_Address.I2C_Addressing_Slave_mode;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	b29a      	uxth	r2, r3
 800083e:	8a3b      	ldrh	r3, [r7, #16]
 8000840:	4313      	orrs	r3, r2
 8000842:	823b      	strh	r3, [r7, #16]
		I2Cx->OAR1 = tmpreg;
 8000844:	8a3a      	ldrh	r2, [r7, #16]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	609a      	str	r2, [r3, #8]

	}

	//interrupt  Mode (Slave Mode ) //Check callback != NULL
	if(I2C_Init_Struct->P_Slave_Event_CallBack != NULL)	//then Enable IRQ State Mode
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d028      	beq.n	80008a4 <MCAL_I2C_Init+0x1d4>
	{
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN) |(I2C_CR2_ITERREN) |(I2C_CR2_ITEVTEN);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <MCAL_I2C_Init+0x1ec>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10c      	bne.n	8000880 <MCAL_I2C_Init+0x1b0>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MCAL_I2C_Init+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <MCAL_I2C_Init+0x200>)
 800086c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000870:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MCAL_I2C_Init+0x204>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MCAL_I2C_Init+0x204>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e00b      	b.n	8000898 <MCAL_I2C_Init+0x1c8>
		}else
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MCAL_I2C_Init+0x204>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MCAL_I2C_Init+0x204>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MCAL_I2C_Init+0x204>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <MCAL_I2C_Init+0x204>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1 = 0;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]

	}


	/*  SMBUS Not Supported*/
	I2Cx->CR1 |= I2C_CR1_PE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f043 0201 	orr.w	r2, r3, #1
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]

}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	007a1200 	.word	0x007a1200
 80008bc:	40005400 	.word	0x40005400
 80008c0:	2000001c 	.word	0x2000001c
 80008c4:	40021000 	.word	0x40021000
 80008c8:	431bde83 	.word	0x431bde83
 80008cc:	000186a0 	.word	0x000186a0
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000e104 	.word	0xe000e104

080008d8 <MCAL_I2C_GPIO_Set_Pins>:
//* Note
 *
*/
/**================================================================*/
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCnfg;
	if(I2Cx == I2C1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <MCAL_I2C_GPIO_Set_Pins+0x80>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d118      	bne.n	800091a <MCAL_I2C_GPIO_Set_Pins+0x42>
		{
		// PB6 :SCL
		//PB7 :SDA
		pinCnfg.GPIO_PinNumber =GPIO_PIN_6;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008ec:	2307      	movs	r3, #7
 80008ee:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4818      	ldr	r0, [pc, #96]	; (800095c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80008fc:	f7ff fdba 	bl	8000474 <MCAL_GPIO_Init>

		pinCnfg.GPIO_PinNumber =GPIO_PIN_7;
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	81bb      	strh	r3, [r7, #12]
		pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000904:	2307      	movs	r3, #7
 8000906:	73bb      	strb	r3, [r7, #14]
		pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCnfg);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000914:	f7ff fdae 	bl	8000474 <MCAL_GPIO_Init>


		}


}
 8000918:	e019      	b.n	800094e <MCAL_I2C_GPIO_Set_Pins+0x76>
			pinCnfg.GPIO_PinNumber =GPIO_PIN_10;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	81bb      	strh	r3, [r7, #12]
			pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000920:	2307      	movs	r3, #7
 8000922:	73bb      	strb	r3, [r7, #14]
			pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinCnfg);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000930:	f7ff fda0 	bl	8000474 <MCAL_GPIO_Init>
			pinCnfg.GPIO_PinNumber =GPIO_PIN_11;
 8000934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000938:	81bb      	strh	r3, [r7, #12]
			pinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 800093a:	2307      	movs	r3, #7
 800093c:	73bb      	strb	r3, [r7, #14]
			pinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800093e:	2301      	movs	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinCnfg);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 800094a:	f7ff fd93 	bl	8000474 <MCAL_GPIO_Init>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40005400 	.word	0x40005400
 800095c:	40010c00 	.word	0x40010c00

08000960 <MCAL_I2C_Master_TX>:
//* Note
 *
*/
/**================================================================*/
void MCAL_I2C_Master_TX(I2C_TypeDef *I2Cx , uint16_t devAdd,uint8_t* dataOut, uint32_t dataLen , Stop_Condition Stop , Repeated_Start start)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	460b      	mov	r3, r1
 800096e:	817b      	strh	r3, [r7, #10]
	int i =0;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

	//to do support time out to configure timer for specific duration rase interrup
	// so any check flag has expiration time

	//1. Generate Star Condition
	I2C_GenerateStar(I2Cx , ENABLE,  start);
 8000974:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000978:	461a      	mov	r2, r3
 800097a:	2101      	movs	r1, #1
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f000 f8c1 	bl	8000b04 <I2C_GenerateStar>

	//2.Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while( !(I2C_GetFlagStatus( I2Cx, EV5)));
 8000982:	bf00      	nop
 8000984:	2101      	movs	r1, #1
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f8e4 	bl	8000b54 <I2C_GetFlagStatus>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f8      	beq.n	8000984 <MCAL_I2C_Master_TX+0x24>

	//3- Send Address
	I2C_SendAddress( I2Cx,  devAdd , I2C_Direction_Transmitter);
 8000992:	897b      	ldrh	r3, [r7, #10]
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f000 f965 	bl	8000c68 <I2C_SendAddress>

	//2.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 800099e:	bf00      	nop
 80009a0:	2102      	movs	r1, #2
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f8d6 	bl	8000b54 <I2C_GetFlagStatus>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f8      	beq.n	80009a0 <MCAL_I2C_Master_TX+0x40>

	//4. Busy MSL TXE TRA
	while( !(I2C_GetFlagStatus( I2Cx, MASTER_BYTE_TRANSMITING)));
 80009ae:	bf00      	nop
 80009b0:	4919      	ldr	r1, [pc, #100]	; (8000a18 <MCAL_I2C_Master_TX+0xb8>)
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f8ce 	bl	8000b54 <I2C_GetFlagStatus>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f8      	beq.n	80009b0 <MCAL_I2C_Master_TX+0x50>

	for( i= 0; i< dataLen ; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e011      	b.n	80009e8 <MCAL_I2C_Master_TX+0x88>
	{
		I2Cx->DR = dataOut[i];
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	611a      	str	r2, [r3, #16]
		//5.Wait EV8
		//EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register

		while( !(I2C_GetFlagStatus( I2Cx, EV8)));
 80009d2:	bf00      	nop
 80009d4:	2103      	movs	r1, #3
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f000 f8bc 	bl	8000b54 <I2C_GetFlagStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f8      	beq.n	80009d4 <MCAL_I2C_Master_TX+0x74>
	for( i= 0; i< dataLen ; i++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8e9      	bhi.n	80009c4 <MCAL_I2C_Master_TX+0x64>
	}
	//wait for EV8_2
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while( !(I2C_GetFlagStatus( I2Cx, EV8_2)));
 80009f0:	bf00      	nop
 80009f2:	2105      	movs	r1, #5
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f8ad 	bl	8000b54 <I2C_GetFlagStatus>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f8      	beq.n	80009f2 <MCAL_I2C_Master_TX+0x92>

	if(Stop == WithStop){
 8000a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d103      	bne.n	8000a10 <MCAL_I2C_Master_TX+0xb0>
		//Send Stop Condition
		 I2C_GenerateStop(I2Cx , ENABLE);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f000 f958 	bl	8000cc0 <I2C_GenerateStop>
	}



}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	00070080 	.word	0x00070080

08000a1c <MCAL_I2C_Master_RX>:
void MCAL_I2C_Master_RX(I2C_TypeDef *I2Cx , uint16_t devAdd,uint8_t* dataOut, uint32_t dataLen , Stop_Condition Stop , Repeated_Start start)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	817b      	strh	r3, [r7, #10]
	uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4a33      	ldr	r2, [pc, #204]	; (8000afc <MCAL_I2C_Master_RX+0xe0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	74fb      	strb	r3, [r7, #19]
	int i =0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
	//to do support time out to configure timer for specific duration rase interrup
		// so any check flag has expiration time

		//1. Generate Star Condition
		I2C_GenerateStar(I2Cx , ENABLE,  start);
 8000a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a44:	461a      	mov	r2, r3
 8000a46:	2101      	movs	r1, #1
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f85b 	bl	8000b04 <I2C_GenerateStar>

		//2.Wait for EV5
		//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		while( !(I2C_GetFlagStatus( I2Cx, EV5)));
 8000a4e:	bf00      	nop
 8000a50:	2101      	movs	r1, #1
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f000 f87e 	bl	8000b54 <I2C_GetFlagStatus>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f8      	beq.n	8000a50 <MCAL_I2C_Master_RX+0x34>

		//3- Send Address
		I2C_SendAddress( I2Cx,  devAdd , I2C_Direction_Recieve);
 8000a5e:	897b      	ldrh	r3, [r7, #10]
 8000a60:	2201      	movs	r2, #1
 8000a62:	4619      	mov	r1, r3
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f000 f8ff 	bl	8000c68 <I2C_SendAddress>

		//2.Wait for EV6
		//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
		while( !(I2C_GetFlagStatus( I2Cx, EV6)));
 8000a6a:	bf00      	nop
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f870 	bl	8000b54 <I2C_GetFlagStatus>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f8      	beq.n	8000a6c <MCAL_I2C_Master_RX+0x50>

		I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f93a 	bl	8000cf6 <I2C_AcknowledgeConfig>

		if(dataLen)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d01c      	beq.n	8000ac2 <MCAL_I2C_Master_RX+0xa6>
		{
			for( i= dataLen; i >= 1 ; i--)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e012      	b.n	8000ab4 <MCAL_I2C_Master_RX+0x98>
			{

				//5.Wait EV7
				//%62X.%CLEAREDBYREADING$2REGISTER
				while( !(I2C_GetFlagStatus( I2Cx, EV7)));
 8000a8e:	bf00      	nop
 8000a90:	2106      	movs	r1, #6
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f85e 	bl	8000b54 <I2C_GetFlagStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f8      	beq.n	8000a90 <MCAL_I2C_Master_RX+0x74>

				*dataOut = I2Cx->DR ;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	701a      	strb	r2, [r3, #0]
				dataOut++;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
			for( i= dataLen; i >= 1 ; i--)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dce9      	bgt.n	8000a8e <MCAL_I2C_Master_RX+0x72>
			}
			I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8000aba:	2100      	movs	r1, #0
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f000 f91a 	bl	8000cf6 <I2C_AcknowledgeConfig>


		}
		if(Stop == WithStop)
 8000ac2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d103      	bne.n	8000ad2 <MCAL_I2C_Master_RX+0xb6>
		{
			//7-Send Stop Condition
			I2C_GenerateStop(I2Cx, ENABLE);
 8000aca:	2101      	movs	r1, #1
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f000 f8f7 	bl	8000cc0 <I2C_GenerateStop>
		}
		if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000ad2:	7cfa      	ldrb	r2, [r7, #19]
 8000ad4:	490a      	ldr	r1, [pc, #40]	; (8000b00 <MCAL_I2C_Master_RX+0xe4>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3318      	adds	r3, #24
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae8:	d103      	bne.n	8000af2 <MCAL_I2C_Master_RX+0xd6>
		{
			I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000aea:	2101      	movs	r1, #1
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f902 	bl	8000cf6 <I2C_AcknowledgeConfig>
		}



}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40005400 	.word	0x40005400
 8000b00:	2000001c 	.word	0x2000001c

08000b04 <I2C_GenerateStar>:

void I2C_GenerateStar(I2C_TypeDef *I2Cx , FunctionalState NewState, Repeated_Start Start)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
 8000b10:	4613      	mov	r3, r2
 8000b12:	70bb      	strb	r3, [r7, #2]
	if(Start != RepeatedSart)
 8000b14:	78bb      	ldrb	r3, [r7, #2]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d007      	beq.n	8000b2a <I2C_GenerateStar+0x26>
	{
		//check if the bud is idle
		while(  I2C_GetFlagStatus( I2Cx, I2C_FLAG_BUSY) );
 8000b1a:	bf00      	nop
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f818 	bl	8000b54 <I2C_GetFlagStatus>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f8      	bne.n	8000b1c <I2C_GenerateStar+0x18>
	//		1: Repeated start generation
	//		In Slave mode:
	//		0: No Start generation
	//		1: Start generation when the bus is free

			if(NewState != DISABLE)
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <I2C_GenerateStar+0x3a>
			{
				/*Generate Starte Condition*/
				I2Cx->CR1 |= I2C_CR1_START;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
			{
				/*Disable  Starte Condition Generation*/
				I2Cx->CR1 &= ~(I2C_CR1_START);
			}

}
 8000b3c:	e005      	b.n	8000b4a <I2C_GenerateStar+0x46>
				I2Cx->CR1 &= ~(I2C_CR1_START);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <I2C_GetFlagStatus>:


FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status Flag)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
	FlagStatus bitstatus = RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	77fb      	strb	r3, [r7, #31]
	volatile uint32_t dummy_Read;
	uint32_t flag1 = 0 ,flag2 =0 , lastevent =0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]


	switch(Flag)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d806      	bhi.n	8000b82 <I2C_GetFlagStatus+0x2e>
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d232      	bcs.n	8000bde <I2C_GetFlagStatus+0x8a>
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d016      	beq.n	8000baa <I2C_GetFlagStatus+0x56>
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d820      	bhi.n	8000bc2 <I2C_GetFlagStatus+0x6e>
 8000b80:	e007      	b.n	8000b92 <I2C_GetFlagStatus+0x3e>
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d043      	beq.n	8000c0e <I2C_GetFlagStatus+0xba>
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d335      	bcc.n	8000bf6 <I2C_GetFlagStatus+0xa2>
 8000b8a:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <I2C_GetFlagStatus+0x110>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d04a      	beq.n	8000c26 <I2C_GetFlagStatus+0xd2>
 8000b90:	e061      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
//		– Set by hardware on detection of SDA or SCL low
//		– cleared by hardware on detection of a Stop condition.
//		It indicates a communication in progress on the bus. This information is still updated when
//		the interface is disabled (PE=0).

		if( (I2Cx->SR2) & (I2C_SR2_BUSY) )
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <I2C_GetFlagStatus+0x50>
			bitstatus = SET;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000ba2:	e058      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
			bitstatus = RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	77fb      	strb	r3, [r7, #31]
		break;
 8000ba8:	e055      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
//		1: Start condition generated.
//		– Set when a Start condition generated.
//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
//		hardware when PE=0		the interface is disabled (PE=0).

		if( (I2Cx->SR1) & (I2C_SR1_SB) )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <I2C_GetFlagStatus+0x68>
			bitstatus = SET;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000bba:	e04c      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
			bitstatus = RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	77fb      	strb	r3, [r7, #31]
		break;
 8000bc0:	e049      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
//			0: No end of address transmission
//			1: End of address transmission
//			– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
//			– For 7-bit addressing, the bit is set after the ACK of the byte.
//			Note: ADDR is not set after a NACK reception
			if( (I2Cx->SR1) & (I2C_SR1_ADDR) )
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <I2C_GetFlagStatus+0x80>
				bitstatus = SET;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	77fb      	strb	r3, [r7, #31]
 8000bd2:	e001      	b.n	8000bd8 <I2C_GetFlagStatus+0x84>
			else
				bitstatus = RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	77fb      	strb	r3, [r7, #31]

			if(I2Cx->SR2);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
			break;
 8000bdc:	e03b      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
//				– Cleared by software writing to the DR register or by hardware after a start or a stop condition
//				or when PE=0.
//				TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
//				Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
//				BTF is set, as in both cases the data register is still empty
				if( (I2Cx->SR1) & (I2C_SR1_TXE) )
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <I2C_GetFlagStatus+0x9c>
					bitstatus = SET;
 8000bea:	2301      	movs	r3, #1
 8000bec:	77fb      	strb	r3, [r7, #31]
				else
					bitstatus = RESET;


				break;
 8000bee:	e032      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
					bitstatus = RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	77fb      	strb	r3, [r7, #31]
				break;
 8000bf4:	e02f      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
//					– Cleared by software reading SR1 followed by either a read or write in the DR register or by
//					hardware after a start or a stop condition in transmission or when PE=0.
//					Note: The BTF bit is not set after a NACK reception
//					The BTF bit is not set if next byte to be transmitted is the PEC (TRA=1 in I2C_SR2
//					register and PEC=1 in I2C_CR1 register)
					if( (I2Cx->SR1) & (I2C_SR1_BTF) )
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <I2C_GetFlagStatus+0xb4>
						bitstatus = SET;
 8000c02:	2301      	movs	r3, #1
 8000c04:	77fb      	strb	r3, [r7, #31]
					else
						bitstatus = RESET;


					break;
 8000c06:	e026      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
						bitstatus = RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
					break;
 8000c0c:	e023      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
//					– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
//					– Cleared by software reading or writing the DR register or by hardware when PE=0.
//					RxNE is not set in case of ARLO event.
//					Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full

					if( (I2Cx->SR1) & (I2C_SR1_RXNE) )
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <I2C_GetFlagStatus+0xcc>
						bitstatus = SET;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	77fb      	strb	r3, [r7, #31]
					else
						bitstatus = RESET;


					break;
 8000c1e:	e01a      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
						bitstatus = RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	77fb      	strb	r3, [r7, #31]
					break;
 8000c24:	e017      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
				}
	case MASTER_BYTE_TRANSMITING:
			{

				/*Read The I2Cx Statu Register*/
				flag1 = I2Cx->SR1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	61bb      	str	r3, [r7, #24]
				flag2 = I2Cx->SR2;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	617b      	str	r3, [r7, #20]
				flag2 = flag2<<16;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	617b      	str	r3, [r7, #20]
				/*Get the last Event value from I2C Statu Register*/
				lastevent = (flag1 | flag2) & ((uint32_t) 0xffffffff);
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
				//Check whether lastevent contain THE I2C_EVENT
				if((lastevent & MASTER_BYTE_TRANSMITING) == MASTER_BYTE_TRANSMITING)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <I2C_GetFlagStatus+0x110>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <I2C_GetFlagStatus+0x110>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d102      	bne.n	8000c52 <I2C_GetFlagStatus+0xfe>
					bitstatus = SET;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	77fb      	strb	r3, [r7, #31]
 8000c50:	e001      	b.n	8000c56 <I2C_GetFlagStatus+0x102>
				else
					bitstatus = RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	77fb      	strb	r3, [r7, #31]
			}
	}
return bitstatus;
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3724      	adds	r7, #36	; 0x24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	00070080 	.word	0x00070080

08000c68 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t Address , I2C_Direction Direction)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
	uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <I2C_SendAddress+0x50>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	bf14      	ite	ne
 8000c80:	2301      	movne	r3, #1
 8000c82:	2300      	moveq	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	73fb      	strb	r3, [r7, #15]

	if(Global_I2C_Config[index].I2C_Mode == I2C_Addressing_Slave_mode_7Bit)
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	490c      	ldr	r1, [pc, #48]	; (8000cbc <I2C_SendAddress+0x54>)
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	3308      	adds	r3, #8
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <I2C_SendAddress+0x44>
	{
		// Send Address
		I2Cx->DR = (Address << 1 | Direction);
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	005a      	lsls	r2, r3, #1
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	611a      	str	r2, [r3, #16]
	}




}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	2000001c 	.word	0x2000001c

08000cc0 <I2C_GenerateStop>:

void I2C_GenerateStop(I2C_TypeDef *I2Cx , FunctionalState NewState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <I2C_GenerateStop+0x20>
		{
			/*Generate Stop Condition*/
			I2Cx->CR1 |= I2C_CR1_STOP;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
		{
			/*Disable  Stop Condition Generation*/
			I2Cx->CR1 &= ~(I2C_CR1_STOP);
		}

}
 8000cde:	e005      	b.n	8000cec <I2C_GenerateStop+0x2c>
			I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx,FunctionalState NewState)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <I2C_AcknowledgeConfig+0x20>
		{
			/*Generate Stop Condition*/
			I2Cx->CR1 |= I2C_CR1_ACK;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
		else
		{
			/*Disable  Stop Condition Generation*/
			I2Cx->CR1 &= ~(I2C_CR1_ACK);
		}
}
 8000d14:	e005      	b.n	8000d22 <I2C_AcknowledgeConfig+0x2c>
			I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler()
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler()
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler()
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler()
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d006      	beq.n	8000d7c <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d302      	bcc.n	8000d78 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d004      	beq.n	8000d80 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000d76:	e005      	b.n	8000d84 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000d7a:	e003      	b.n	8000d84 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000d7e:	e001      	b.n	8000d84 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000d82:	e7ff      	b.n	8000d84 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	007a1200 	.word	0x007a1200
 8000d94:	00f42400 	.word	0x00f42400

08000d98 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000d9c:	f7ff ffde 	bl	8000d5c <MCAL_RCC_GetSYS_CLCKFreq>
 8000da0:	4601      	mov	r1, r0
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <MCAL_RCC_GetHCLKFreq+0x24>)
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	08000f4c 	.word	0x08000f4c

08000dc0 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000dc4:	f7ff ffe8 	bl	8000d98 <MCAL_RCC_GetHCLKFreq>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	08000f44 	.word	0x08000f44

08000de8 <SPI1_IRQHandler>:
 * =========================================================================
 * 							ISR
 * ==========================================================================
 */

void SPI1_IRQHandler(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SR &(1<<1))>>1);
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <SPI1_IRQHandler+0x54>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	085b      	lsrs	r3, r3, #1
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	793b      	ldrb	r3, [r7, #4]
 8000dfc:	f362 0300 	bfi	r3, r2, #0, #1
 8000e00:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR &(1<<0))>>0);
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <SPI1_IRQHandler+0x54>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	793b      	ldrb	r3, [r7, #4]
 8000e0e:	f362 0341 	bfi	r3, r2, #1, #1
 8000e12:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR &(1<<4))>>4);
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <SPI1_IRQHandler+0x54>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	793b      	ldrb	r3, [r7, #4]
 8000e22:	f362 0382 	bfi	r3, r2, #2, #1
 8000e26:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SPI1_IRQHandler+0x58>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	7938      	ldrb	r0, [r7, #4]
 8000e30:	4798      	blx	r3

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	20000064 	.word	0x20000064

08000e44 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI2->SR &(1<<1))>>1);
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <SPI2_IRQHandler+0x54>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	085b      	lsrs	r3, r3, #1
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	793b      	ldrb	r3, [r7, #4]
 8000e58:	f362 0300 	bfi	r3, r2, #0, #1
 8000e5c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR &(1<<0))>>0);
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <SPI2_IRQHandler+0x54>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e6e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR &(1<<4))>>4);
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <SPI2_IRQHandler+0x54>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	f362 0382 	bfi	r3, r2, #2, #1
 8000e82:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SPI2_IRQHandler+0x58>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	7938      	ldrb	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40003800 	.word	0x40003800
 8000e9c:	20000064 	.word	0x20000064

08000ea0 <USART1_IRQHandler>:
}


//ISR

void USART1_IRQHandler(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	4798      	blx	r3

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000006c 	.word	0x2000006c

08000eb4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4798      	blx	r3

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000006c 	.word	0x2000006c

08000ec8 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack();
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <USART3_IRQHandler+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	4798      	blx	r3

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000006c 	.word	0x2000006c

08000edc <__libc_init_array>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	2500      	movs	r5, #0
 8000ee0:	4e0c      	ldr	r6, [pc, #48]	; (8000f14 <__libc_init_array+0x38>)
 8000ee2:	4c0d      	ldr	r4, [pc, #52]	; (8000f18 <__libc_init_array+0x3c>)
 8000ee4:	1ba4      	subs	r4, r4, r6
 8000ee6:	10a4      	asrs	r4, r4, #2
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	d109      	bne.n	8000f00 <__libc_init_array+0x24>
 8000eec:	f000 f81a 	bl	8000f24 <_init>
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	4e0a      	ldr	r6, [pc, #40]	; (8000f1c <__libc_init_array+0x40>)
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <__libc_init_array+0x44>)
 8000ef6:	1ba4      	subs	r4, r4, r6
 8000ef8:	10a4      	asrs	r4, r4, #2
 8000efa:	42a5      	cmp	r5, r4
 8000efc:	d105      	bne.n	8000f0a <__libc_init_array+0x2e>
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f04:	4798      	blx	r3
 8000f06:	3501      	adds	r5, #1
 8000f08:	e7ee      	b.n	8000ee8 <__libc_init_array+0xc>
 8000f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f0e:	4798      	blx	r3
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7f2      	b.n	8000efa <__libc_init_array+0x1e>
 8000f14:	08000f5c 	.word	0x08000f5c
 8000f18:	08000f5c 	.word	0x08000f5c
 8000f1c:	08000f5c 	.word	0x08000f5c
 8000f20:	08000f60 	.word	0x08000f60

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
