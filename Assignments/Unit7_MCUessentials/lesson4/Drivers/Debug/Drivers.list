
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d0c  08000d0c  00010d14  2**0
                  CONTENTS
  4 .ARM          00000000  08000d0c  08000d0c  00010d14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d0c  08000d14  00010d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000d14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000d14  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d14  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eb9  00000000  00000000  00010d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000996  00000000  00000000  00014bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a88  00000000  00000000  0001558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  00016018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  000161f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002564  00000000  00000000  00016380  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002616  00000000  00000000  000188e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000962d  00000000  00000000  0001aefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024527  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c0  00000000  00000000  000245a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cd0 	.word	0x08000cd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cd0 	.word	0x08000cd0

08000170 <LCD_DataDir_Output>:
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);


}

void LCD_DataDir_Output(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	///GPIO_PIN_0 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000174:	4b34      	ldr	r3, [pc, #208]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	4b33      	ldr	r3, [pc, #204]	; (8000248 <LCD_DataDir_Output+0xd8>)
 800017c:	2204      	movs	r2, #4
 800017e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000180:	4b31      	ldr	r3, [pc, #196]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000186:	4930      	ldr	r1, [pc, #192]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000188:	4830      	ldr	r0, [pc, #192]	; (800024c <LCD_DataDir_Output+0xdc>)
 800018a:	f000 fa41 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_1 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000190:	2202      	movs	r2, #2
 8000192:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000194:	4b2c      	ldr	r3, [pc, #176]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000196:	2204      	movs	r2, #4
 8000198:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800019a:	4b2b      	ldr	r3, [pc, #172]	; (8000248 <LCD_DataDir_Output+0xd8>)
 800019c:	2201      	movs	r2, #1
 800019e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80001a0:	4929      	ldr	r1, [pc, #164]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001a2:	482a      	ldr	r0, [pc, #168]	; (800024c <LCD_DataDir_Output+0xdc>)
 80001a4:	f000 fa34 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_2 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80001a8:	4b27      	ldr	r3, [pc, #156]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001aa:	2204      	movs	r2, #4
 80001ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ae:	4b26      	ldr	r3, [pc, #152]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001b0:	2204      	movs	r2, #4
 80001b2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001b4:	4b24      	ldr	r3, [pc, #144]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001bc:	4823      	ldr	r0, [pc, #140]	; (800024c <LCD_DataDir_Output+0xdc>)
 80001be:	f000 fa27 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_3 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80001c2:	4b21      	ldr	r3, [pc, #132]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001c4:	2208      	movs	r2, #8
 80001c6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c8:	4b1f      	ldr	r3, [pc, #124]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001ca:	2204      	movs	r2, #4
 80001cc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ce:	4b1e      	ldr	r3, [pc, #120]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80001d4:	491c      	ldr	r1, [pc, #112]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001d6:	481d      	ldr	r0, [pc, #116]	; (800024c <LCD_DataDir_Output+0xdc>)
 80001d8:	f000 fa1a 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_4 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80001dc:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001de:	2210      	movs	r2, #16
 80001e0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e2:	4b19      	ldr	r3, [pc, #100]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001e4:	2204      	movs	r2, #4
 80001e6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e8:	4b17      	ldr	r3, [pc, #92]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80001ee:	4916      	ldr	r1, [pc, #88]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001f0:	4816      	ldr	r0, [pc, #88]	; (800024c <LCD_DataDir_Output+0xdc>)
 80001f2:	f000 fa0d 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_5 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001f8:	2220      	movs	r2, #32
 80001fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <LCD_DataDir_Output+0xd8>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000202:	4b11      	ldr	r3, [pc, #68]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000208:	490f      	ldr	r1, [pc, #60]	; (8000248 <LCD_DataDir_Output+0xd8>)
 800020a:	4810      	ldr	r0, [pc, #64]	; (800024c <LCD_DataDir_Output+0xdc>)
 800020c:	f000 fa00 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_6 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000212:	2240      	movs	r2, #64	; 0x40
 8000214:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000218:	2204      	movs	r2, #4
 800021a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <LCD_DataDir_Output+0xd8>)
 800021e:	2201      	movs	r2, #1
 8000220:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000222:	4909      	ldr	r1, [pc, #36]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <LCD_DataDir_Output+0xdc>)
 8000226:	f000 f9f3 	bl	8000610 <MCAL_GPIO_Init>

	///GPIO_PIN_7 (output PUSH pull Mode)
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <LCD_DataDir_Output+0xd8>)
 800022c:	2280      	movs	r2, #128	; 0x80
 800022e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000232:	2204      	movs	r2, #4
 8000234:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <LCD_DataDir_Output+0xd8>)
 8000238:	2201      	movs	r2, #1
 800023a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800023c:	4902      	ldr	r1, [pc, #8]	; (8000248 <LCD_DataDir_Output+0xd8>)
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <LCD_DataDir_Output+0xdc>)
 8000240:	f000 f9e6 	bl	8000610 <MCAL_GPIO_Init>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000020 	.word	0x20000020
 800024c:	40010800 	.word	0x40010800

08000250 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 f88f 	bl	8000378 <LCD_WRITE_COMMAND>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <LCD_KICK>:

void LCD_KICK(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	//	LCD_CTRL |= (1<<EN_Switch);
		MCAL_GPIO_WritePin(LCD_CTRL, EN_Switch, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <LCD_KICK+0x28>)
 800026c:	f000 fa4f 	bl	800070e <MCAL_GPIO_WritePin>

		wait_ms(30);
 8000270:	201e      	movs	r0, #30
 8000272:	f000 fa7a 	bl	800076a <wait_ms>

//	LCD_CTRL &= ~(1<<EN_Switch);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_Switch, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027c:	4802      	ldr	r0, [pc, #8]	; (8000288 <LCD_KICK+0x28>)
 800027e:	f000 fa46 	bl	800070e <MCAL_GPIO_WritePin>


}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40010800 	.word	0x40010800

0800028c <LCD_GOTO_XY>:
void LCD_GOTO_XY(int l , int pos){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
	if(l ==1){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <LCD_GOTO_XY+0x1e>
		LCD_WRITE_COMMAND(0x80+pos);
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	3b80      	subs	r3, #128	; 0x80
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f867 	bl	8000378 <LCD_WRITE_COMMAND>
	}
	if(l ==2){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d106      	bne.n	80002be <LCD_GOTO_XY+0x32>
		LCD_WRITE_COMMAND(0xc0+pos);
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	3b40      	subs	r3, #64	; 0x40
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f85d 	bl	8000378 <LCD_WRITE_COMMAND>
	}
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <LCD_INIT>:
void LCD_Clear_screen(){
	LCD_WRITE_COMMAND(LCD_Clear_Display);
}
void LCD_INIT(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0



	wait_ms(20);
 80002cc:	2014      	movs	r0, #20
 80002ce:	f000 fa4c 	bl	800076a <wait_ms>

		PinCfg.GPIO_PinNumber = RS_Switch;
 80002d2:	4b27      	ldr	r3, [pc, #156]	; (8000370 <LCD_INIT+0xa8>)
 80002d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d8:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <LCD_INIT+0xa8>)
 80002dc:	2204      	movs	r2, #4
 80002de:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <LCD_INIT+0xa8>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002e6:	4922      	ldr	r1, [pc, #136]	; (8000370 <LCD_INIT+0xa8>)
 80002e8:	4822      	ldr	r0, [pc, #136]	; (8000374 <LCD_INIT+0xac>)
 80002ea:	f000 f991 	bl	8000610 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = Rw_Switch;
 80002ee:	4b20      	ldr	r3, [pc, #128]	; (8000370 <LCD_INIT+0xa8>)
 80002f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002f4:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <LCD_INIT+0xa8>)
 80002f8:	2204      	movs	r2, #4
 80002fa:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <LCD_INIT+0xa8>)
 80002fe:	2201      	movs	r2, #1
 8000300:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000302:	491b      	ldr	r1, [pc, #108]	; (8000370 <LCD_INIT+0xa8>)
 8000304:	481b      	ldr	r0, [pc, #108]	; (8000374 <LCD_INIT+0xac>)
 8000306:	f000 f983 	bl	8000610 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = EN_Switch;
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <LCD_INIT+0xa8>)
 800030c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000310:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <LCD_INIT+0xa8>)
 8000314:	2204      	movs	r2, #4
 8000316:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <LCD_INIT+0xa8>)
 800031a:	2201      	movs	r2, #1
 800031c:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800031e:	4914      	ldr	r1, [pc, #80]	; (8000370 <LCD_INIT+0xa8>)
 8000320:	4814      	ldr	r0, [pc, #80]	; (8000374 <LCD_INIT+0xac>)
 8000322:	f000 f975 	bl	8000610 <MCAL_GPIO_Init>



		//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
		MCAL_GPIO_WritePin(LCD_CTRL, EN_Switch, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4811      	ldr	r0, [pc, #68]	; (8000374 <LCD_INIT+0xac>)
 800032e:	f000 f9ee 	bl	800070e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CTRL, RS_Switch, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000338:	480e      	ldr	r0, [pc, #56]	; (8000374 <LCD_INIT+0xac>)
 800033a:	f000 f9e8 	bl	800070e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CTRL, Rw_Switch, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <LCD_INIT+0xac>)
 8000346:	f000 f9e2 	bl	800070e <MCAL_GPIO_WritePin>

	//LCD_CTRL &=~((1<<EN_Switch)|(1<<Rw_Switch)|(1<<RS_Switch));

	wait_ms(20);
 800034a:	2014      	movs	r0, #20
 800034c:	f000 fa0d 	bl	800076a <wait_ms>

	//DataDir_LCD_PORT = 0xff;
	LCD_DataDir_Output();
 8000350:	f7ff ff0e 	bl	8000170 <LCD_DataDir_Output>

	LCD_clear_screen();
 8000354:	f7ff ff7c 	bl	8000250 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_Function_8BIT_2LINE);
 8000358:	2038      	movs	r0, #56	; 0x38
 800035a:	f000 f80d 	bl	8000378 <LCD_WRITE_COMMAND>


	LCD_WRITE_COMMAND(LCD_Entry_Mode);
 800035e:	2006      	movs	r0, #6
 8000360:	f000 f80a 	bl	8000378 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Display_ON_Cursor_ON);
 8000364:	200e      	movs	r0, #14
 8000366:	f000 f807 	bl	8000378 <LCD_WRITE_COMMAND>

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000020 	.word	0x20000020
 8000374:	40010800 	.word	0x40010800

08000378 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]

//	LCD_IS_BUSY();
	//LCD_PORT = command;
	MCAL_GPIO_WritePort_8(LCD_PORT,command);
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	b29b      	uxth	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <LCD_WRITE_COMMAND+0x40>)
 800038a:	f000 f9d7 	bl	800073c <MCAL_GPIO_WritePort_8>
//	MCAL_GPIO_WritePort(LCD_CTRL,command);

	MCAL_GPIO_WritePin(LCD_CTRL, RS_Switch, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	4808      	ldr	r0, [pc, #32]	; (80003b8 <LCD_WRITE_COMMAND+0x40>)
 8000396:	f000 f9ba 	bl	800070e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, Rw_Switch, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <LCD_WRITE_COMMAND+0x40>)
 80003a2:	f000 f9b4 	bl	800070e <MCAL_GPIO_WritePin>
//	LCD_CTRL &=~((1<<Rw_Switch)|(1<<RS_Switch));
	wait_ms(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 f9df 	bl	800076a <wait_ms>
	LCD_KICK();
 80003ac:	f7ff ff58 	bl	8000260 <LCD_KICK>

}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40010800 	.word	0x40010800

080003bc <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char data){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]

//	LCD_IS_BUSY();
//	LCD_PORT = data;
	MCAL_GPIO_WritePort_8(LCD_PORT,data);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	480b      	ldr	r0, [pc, #44]	; (80003fc <LCD_WRITE_CHAR+0x40>)
 80003ce:	f000 f9b5 	bl	800073c <MCAL_GPIO_WritePort_8>
//	MCAL_GPIO_WritePort(LCD_PORT,data);
//	LCD_CTRL &=~((1<<Rw_Switch));
	MCAL_GPIO_WritePin(LCD_CTRL, RS_Switch, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d8:	4808      	ldr	r0, [pc, #32]	; (80003fc <LCD_WRITE_CHAR+0x40>)
 80003da:	f000 f998 	bl	800070e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, Rw_Switch, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <LCD_WRITE_CHAR+0x40>)
 80003e6:	f000 f992 	bl	800070e <MCAL_GPIO_WritePin>





	wait_ms(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 f9bd 	bl	800076a <wait_ms>
	LCD_KICK();
 80003f0:	f7ff ff36 	bl	8000260 <LCD_KICK>

//	if(++curr_pos >= 16);
//	LCD_GOTO_XY(2,0);
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010800 	.word	0x40010800

08000400 <LCD_WRITE_STR>:
void LCD_WRITE_STR(char* string){
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	int count =0;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
	while(*string){
 800040c:	e01c      	b.n	8000448 <LCD_WRITE_STR+0x48>

		count++;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
		if(count==16)
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2b10      	cmp	r3, #16
 8000418:	d104      	bne.n	8000424 <LCD_WRITE_STR+0x24>
			LCD_GOTO_XY(2,0);
 800041a:	2100      	movs	r1, #0
 800041c:	2002      	movs	r0, #2
 800041e:	f7ff ff35 	bl	800028c <LCD_GOTO_XY>
 8000422:	e00a      	b.n	800043a <LCD_WRITE_STR+0x3a>
		else if(count ==32)
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	2b20      	cmp	r3, #32
 8000428:	d107      	bne.n	800043a <LCD_WRITE_STR+0x3a>
		{
			LCD_clear_screen();
 800042a:	f7ff ff11 	bl	8000250 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 800042e:	2100      	movs	r1, #0
 8000430:	2001      	movs	r0, #1
 8000432:	f7ff ff2b 	bl	800028c <LCD_GOTO_XY>
			count =0;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
		}
		LCD_WRITE_CHAR(*string++);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ffba 	bl	80003bc <LCD_WRITE_CHAR>
	while(*string){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1de      	bne.n	800040e <LCD_WRITE_STR+0xe>
	}
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <EXTI9_callback>:
uint8_t IRQ_Flag =0;



void EXTI9_callback(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	IRQ_Flag=1;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <EXTI9_callback+0x1c>)
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STR(" IRQ9 is happened Omar");
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <EXTI9_callback+0x20>)
 8000464:	f7ff ffcc 	bl	8000400 <LCD_WRITE_STR>
	wait_ms(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f000 f97d 	bl	800076a <wait_ms>

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2000001c 	.word	0x2000001c
 8000478:	08000ce8 	.word	0x08000ce8

0800047c <main>:

int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
	//Enable clock
	RCC_GPIOA_CLK_EN();
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <main+0x6c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <main+0x6c>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <main+0x6c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <main+0x6c>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <main+0x6c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <main+0x6c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]

	//Lcd Init
	LCD_INIT();
 80004a6:	f7ff ff0f 	bl	80002c8 <LCD_INIT>
	LCD_clear_screen();
 80004aa:	f7ff fed1 	bl	8000250 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_Cnfg;
	EXTI_Cnfg.EXTI_PIN = EXTI9PB9;
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <main+0x70>)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Cnfg.Trigger_Case = EXTI_Trigger_RISING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	743b      	strb	r3, [r7, #16]
	EXTI_Cnfg.IRQ_EN = EXTI_IRQ_Enable;
 80004bc:	2301      	movs	r3, #1
 80004be:	747b      	strb	r3, [r7, #17]
	EXTI_Cnfg.p_IRQ_CallBack = EXTI9_callback;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <main+0x74>)
 80004c2:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_GPIO_Init(&EXTI_Cnfg);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fb24 	bl	8000b14 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag=1;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <main+0x78>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]

	while(1){
		if(IRQ_Flag)
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <main+0x78>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0fb      	beq.n	80004d2 <main+0x56>
		{
			LCD_clear_screen();
 80004da:	f7ff feb9 	bl	8000250 <LCD_clear_screen>
			IRQ_Flag=0;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <main+0x78>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 80004e4:	e7f5      	b.n	80004d2 <main+0x56>
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	08000d00 	.word	0x08000d00
 80004f0:	08000459 	.word	0x08000459
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490d      	ldr	r1, [pc, #52]	; (8000538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0a      	ldr	r4, [pc, #40]	; (8000544 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000526:	f000 fbaf 	bl	8000c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff ffa7 	bl	800047c <main>

0800052e <LoopForever>:

LoopForever:
    b LoopForever
 800052e:	e7fe      	b.n	800052e <LoopForever>
  ldr   r0, =_estack
 8000530:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800053c:	08000d14 	.word	0x08000d14
  ldr r2, =_sbss
 8000540:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000544:	20000060 	.word	0x20000060

08000548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_2_IRQHandler>

0800054a <Get_CRLH_Position>:
//#define Get_CRLH_Position(PinNumber)  ((PinNumber < GPIO_PIN_8) ?(4 * PinNumber) : (4 * (PinNumber-GPIO_PIN_8)))



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	2b80      	cmp	r3, #128	; 0x80
 8000558:	d042      	beq.n	80005e0 <Get_CRLH_Position+0x96>
 800055a:	2b80      	cmp	r3, #128	; 0x80
 800055c:	dc11      	bgt.n	8000582 <Get_CRLH_Position+0x38>
 800055e:	2b08      	cmp	r3, #8
 8000560:	d036      	beq.n	80005d0 <Get_CRLH_Position+0x86>
 8000562:	2b08      	cmp	r3, #8
 8000564:	dc06      	bgt.n	8000574 <Get_CRLH_Position+0x2a>
 8000566:	2b02      	cmp	r3, #2
 8000568:	d02e      	beq.n	80005c8 <Get_CRLH_Position+0x7e>
 800056a:	2b04      	cmp	r3, #4
 800056c:	d02e      	beq.n	80005cc <Get_CRLH_Position+0x82>
 800056e:	2b01      	cmp	r3, #1
 8000570:	d028      	beq.n	80005c4 <Get_CRLH_Position+0x7a>
 8000572:	e047      	b.n	8000604 <Get_CRLH_Position+0xba>
 8000574:	2b20      	cmp	r3, #32
 8000576:	d02f      	beq.n	80005d8 <Get_CRLH_Position+0x8e>
 8000578:	2b40      	cmp	r3, #64	; 0x40
 800057a:	d02f      	beq.n	80005dc <Get_CRLH_Position+0x92>
 800057c:	2b10      	cmp	r3, #16
 800057e:	d029      	beq.n	80005d4 <Get_CRLH_Position+0x8a>
 8000580:	e040      	b.n	8000604 <Get_CRLH_Position+0xba>
 8000582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000586:	d033      	beq.n	80005f0 <Get_CRLH_Position+0xa6>
 8000588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800058c:	dc09      	bgt.n	80005a2 <Get_CRLH_Position+0x58>
 800058e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000592:	d029      	beq.n	80005e8 <Get_CRLH_Position+0x9e>
 8000594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000598:	d028      	beq.n	80005ec <Get_CRLH_Position+0xa2>
 800059a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800059e:	d021      	beq.n	80005e4 <Get_CRLH_Position+0x9a>
 80005a0:	e030      	b.n	8000604 <Get_CRLH_Position+0xba>
 80005a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a6:	d027      	beq.n	80005f8 <Get_CRLH_Position+0xae>
 80005a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ac:	dc03      	bgt.n	80005b6 <Get_CRLH_Position+0x6c>
 80005ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005b2:	d01f      	beq.n	80005f4 <Get_CRLH_Position+0xaa>
 80005b4:	e026      	b.n	8000604 <Get_CRLH_Position+0xba>
 80005b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005ba:	d01f      	beq.n	80005fc <Get_CRLH_Position+0xb2>
 80005bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005c0:	d01e      	beq.n	8000600 <Get_CRLH_Position+0xb6>
 80005c2:	e01f      	b.n	8000604 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e01e      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80005c8:	2304      	movs	r3, #4
 80005ca:	e01c      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 80005cc:	2308      	movs	r3, #8
 80005ce:	e01a      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 80005d0:	230c      	movs	r3, #12
 80005d2:	e018      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80005d4:	2310      	movs	r3, #16
 80005d6:	e016      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80005d8:	2314      	movs	r3, #20
 80005da:	e014      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80005dc:	2318      	movs	r3, #24
 80005de:	e012      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80005e0:	231c      	movs	r3, #28
 80005e2:	e010      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 80005e4:	2300      	movs	r3, #0
 80005e6:	e00e      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80005e8:	2304      	movs	r3, #4
 80005ea:	e00c      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80005ec:	2308      	movs	r3, #8
 80005ee:	e00a      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80005f0:	230c      	movs	r3, #12
 80005f2:	e008      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80005f4:	2310      	movs	r3, #16
 80005f6:	e006      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80005f8:	2314      	movs	r3, #20
 80005fa:	e004      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80005fc:	2318      	movs	r3, #24
 80005fe:	e002      	b.n	8000606 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000600:	231c      	movs	r3, #28
 8000602:	e000      	b.n	8000606 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <MCAL_GPIO_Init>:
* Note					-stm32f103c6 MCU has GPIO A,B,C,D,E Modules
* 						 but LQFP48 Package has only Gpio A,B part of C/D exported as external pins from the MCU
*/

void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PinConfig_t * PinConfig)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configure PINS from 8 >>> 15

	volatile uint32_t* configregister = NULL;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	uint8_t  PIN_Config = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	2bff      	cmp	r3, #255	; 0xff
 8000628:	d801      	bhi.n	800062e <MCAL_GPIO_Init+0x1e>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	e001      	b.n	8000632 <MCAL_GPIO_Init+0x22>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3304      	adds	r3, #4
 8000632:	60bb      	str	r3, [r7, #8]
	//Clear CNF[1:0] MODE[1;0]
	(*configregister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff86 	bl	800054a <Get_CRLH_Position>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	230f      	movs	r3, #15
 8000644:	4093      	lsls	r3, r2
 8000646:	43da      	mvns	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	401a      	ands	r2, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b07      	cmp	r3, #7
 8000658:	d00b      	beq.n	8000672 <MCAL_GPIO_Init+0x62>
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	2b06      	cmp	r3, #6
 8000660:	d007      	beq.n	8000672 <MCAL_GPIO_Init+0x62>
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	789b      	ldrb	r3, [r3, #2]
 8000666:	2b05      	cmp	r3, #5
 8000668:	d003      	beq.n	8000672 <MCAL_GPIO_Init+0x62>
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d10e      	bne.n	8000690 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1;0]
		PIN_Config =  ((((PinConfig->GPIO_MODE- 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	3b04      	subs	r3, #4
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	b25a      	sxtb	r2, r3
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	b25b      	sxtb	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	b25b      	sxtb	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 030f 	and.w	r3, r3, #15
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e02c      	b.n	80006ea <MCAL_GPIO_Init+0xda>
	}
	else  // Mode = 0x00 inpute mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	789b      	ldrb	r3, [r3, #2]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <MCAL_GPIO_Init+0x90>
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d107      	bne.n	80006b0 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((PinConfig->GPIO_MODE ) << 2) | 0x00) & 0x0f );
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	e01c      	b.n	80006ea <MCAL_GPIO_Init+0xda>

		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))   // consider it as input floating
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d102      	bne.n	80006be <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1;0]
			PIN_Config =  ( (((GPIO_MODE_INPUT_FLO ) << 2) | 0x0) & 0x0f );
 80006b8:	2304      	movs	r3, #4
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e015      	b.n	80006ea <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config =  ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0f );
 80006be:	2308      	movs	r3, #8
 80006c0:	73fb      	strb	r3, [r7, #15]
			if( PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d107      	bne.n	80006da <MCAL_GPIO_Init+0xca>
			{

				//GPIOx->BSRR =   PinConfig->GPIO_PinNumber;
				GPIOx->ODR |=   PinConfig->GPIO_PinNumber;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	8812      	ldrh	r2, [r2, #0]
 80006d2:	431a      	orrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	e007      	b.n	80006ea <MCAL_GPIO_Init+0xda>

			}else
			{
			//	GPIOx->BRR &= ~ ( PinConfig->GPIO_PinNumber);
				GPIOx->ODR &= ~ ( PinConfig->GPIO_PinNumber);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	401a      	ands	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60da      	str	r2, [r3, #12]

	}

	// write on CRL or CRH

	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006ea:	7bfc      	ldrb	r4, [r7, #15]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff2a 	bl	800054a <Get_CRLH_Position>
 80006f6:	4603      	mov	r3, r0
 80006f8:	fa04 f203 	lsl.w	r2, r4, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	431a      	orrs	r2, r3
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	601a      	str	r2, [r3, #0]

}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bd90      	pop	{r4, r7, pc}

0800070e <MCAL_GPIO_WritePin>:
* @param [in] 			- PinNumber: Set Pin Number according @ref GPIO_PINS_define
* @param [in] 			- PinValue : the input pin value (two values based on @ref GPIO_PIN_state )
* @retval 				- none
* Note					- none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx ,  uint16_t  PinNumber ,  uint8_t  PinValue){
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	807b      	strh	r3, [r7, #2]
 800071a:	4613      	mov	r3, r2
 800071c:	707b      	strb	r3, [r7, #1]
	if ( PinValue !=  GPIO_PIN_RESET )
 800071e:	787b      	ldrb	r3, [r7, #1]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <MCAL_GPIO_WritePin+0x1e>
	//		or
	//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	//		These bits are write-only and can be accessed in Word mode only.
	//		0: No action on the corresponding ODRx bit
	//		1: Set the corresponding ODRx bit
			GPIOx->BSRR = (uint32_t)PinNumber ;
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	611a      	str	r2, [r3, #16]
	//		These bits are write-only and can be accessed in Word mode only.
	//		0: No action on the corresponding ODRx bit
	//		1: Reset the corresponding ODRx bit
			GPIOx->BRR = (uint32_t)PinNumber ;
		}
}
 800072a:	e002      	b.n	8000732 <MCAL_GPIO_WritePin+0x24>
			GPIOx->BRR = (uint32_t)PinNumber ;
 800072c:	887a      	ldrh	r2, [r7, #2]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	615a      	str	r2, [r3, #20]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <MCAL_GPIO_WritePort_8>:
* @param [in] 			- GPIOx: where x can be (A..E depending on device used) to select the GPIO Peripheral
* @param [in] 			- PortValue : the input Port value
* @retval 				- none
* Note					- none
*/
void MCAL_GPIO_WritePort_8(GPIO_TypeDef * GPIOx ,  uint16_t  PortValue){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR &= ~(0xff) ;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	60da      	str	r2, [r3, #12]
	GPIOx->ODR |= (uint32_t)PortValue ;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	887b      	ldrh	r3, [r7, #2]
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	60da      	str	r2, [r3, #12]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <wait_ms>:

	}
}


void wait_ms(uint32_t time){
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i =0 ; i < time; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00b      	b.n	8000790 <wait_ms+0x26>
		for(j= 0 ; j < 255; j++);
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	e002      	b.n	8000784 <wait_ms+0x1a>
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3301      	adds	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2bfe      	cmp	r3, #254	; 0xfe
 8000788:	d9f9      	bls.n	800077e <wait_ms+0x14>
	for(i =0 ; i < time; i++)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3ef      	bcc.n	8000778 <wait_ms+0xe>
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <Enable_NVIC>:
 * 							Generic Functions
 * ==========================================================================
 */

void Enable_NVIC(uint16_t IRQ)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d854      	bhi.n	800085e <Enable_NVIC+0xba>
 80007b4:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <Enable_NVIC+0x18>)
 80007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ba:	bf00      	nop
 80007bc:	080007fd 	.word	0x080007fd
 80007c0:	0800080b 	.word	0x0800080b
 80007c4:	08000819 	.word	0x08000819
 80007c8:	08000827 	.word	0x08000827
 80007cc:	08000835 	.word	0x08000835
 80007d0:	08000843 	.word	0x08000843
 80007d4:	08000843 	.word	0x08000843
 80007d8:	08000843 	.word	0x08000843
 80007dc:	08000843 	.word	0x08000843
 80007e0:	08000843 	.word	0x08000843
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000851 	.word	0x08000851
 80007ec:	08000851 	.word	0x08000851
 80007f0:	08000851 	.word	0x08000851
 80007f4:	08000851 	.word	0x08000851
 80007f8:	08000851 	.word	0x08000851
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <Enable_NVIC+0xc4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a19      	ldr	r2, [pc, #100]	; (8000868 <Enable_NVIC+0xc4>)
 8000802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000806:	6013      	str	r3, [r2, #0]
		break;
 8000808:	e029      	b.n	800085e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <Enable_NVIC+0xc4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <Enable_NVIC+0xc4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6013      	str	r3, [r2, #0]
		break;
 8000816:	e022      	b.n	800085e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <Enable_NVIC+0xc4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <Enable_NVIC+0xc4>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	6013      	str	r3, [r2, #0]
		break;
 8000824:	e01b      	b.n	800085e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <Enable_NVIC+0xc4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <Enable_NVIC+0xc4>)
 800082c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000830:	6013      	str	r3, [r2, #0]
		break;
 8000832:	e014      	b.n	800085e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <Enable_NVIC+0xc4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <Enable_NVIC+0xc4>)
 800083a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083e:	6013      	str	r3, [r2, #0]
		break;
 8000840:	e00d      	b.n	800085e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <Enable_NVIC+0xc4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <Enable_NVIC+0xc4>)
 8000848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800084c:	6013      	str	r3, [r2, #0]
		break;
 800084e:	e006      	b.n	800085e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <Enable_NVIC+0xc8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <Enable_NVIC+0xc8>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6013      	str	r3, [r2, #0]
		break;
 800085c:	bf00      	nop

	  }
	}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000e104 	.word	0xe000e104

08000870 <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d854      	bhi.n	800092a <Disable_NVIC+0xba>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <Disable_NVIC+0x18>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	080008c9 	.word	0x080008c9
 800088c:	080008d7 	.word	0x080008d7
 8000890:	080008e5 	.word	0x080008e5
 8000894:	080008f3 	.word	0x080008f3
 8000898:	08000901 	.word	0x08000901
 800089c:	0800090f 	.word	0x0800090f
 80008a0:	0800090f 	.word	0x0800090f
 80008a4:	0800090f 	.word	0x0800090f
 80008a8:	0800090f 	.word	0x0800090f
 80008ac:	0800090f 	.word	0x0800090f
 80008b0:	0800091d 	.word	0x0800091d
 80008b4:	0800091d 	.word	0x0800091d
 80008b8:	0800091d 	.word	0x0800091d
 80008bc:	0800091d 	.word	0x0800091d
 80008c0:	0800091d 	.word	0x0800091d
 80008c4:	0800091d 	.word	0x0800091d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <Disable_NVIC+0xc4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <Disable_NVIC+0xc4>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	6013      	str	r3, [r2, #0]
		break;
 80008d4:	e029      	b.n	800092a <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <Disable_NVIC+0xc4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <Disable_NVIC+0xc4>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6013      	str	r3, [r2, #0]
		break;
 80008e2:	e022      	b.n	800092a <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <Disable_NVIC+0xc4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <Disable_NVIC+0xc4>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
		break;
 80008f0:	e01b      	b.n	800092a <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <Disable_NVIC+0xc4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <Disable_NVIC+0xc4>)
 80008f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fc:	6013      	str	r3, [r2, #0]
		break;
 80008fe:	e014      	b.n	800092a <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <Disable_NVIC+0xc4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <Disable_NVIC+0xc4>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
		break;
 800090c:	e00d      	b.n	800092a <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <Disable_NVIC+0xc4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <Disable_NVIC+0xc4>)
 8000914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000918:	6013      	str	r3, [r2, #0]
		break;
 800091a:	e006      	b.n	800092a <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <Disable_NVIC+0xc8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <Disable_NVIC+0xc8>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]
		break;
 8000928:	bf00      	nop

	  }
	}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000e180 	.word	0xe000e180
 8000938:	e000e184 	.word	0xe000e184

0800093c <Update_EXTI>:
void Update_EXTI(EXTI_PinConfig_t *EXTI_Config){
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

	//1- configure GPIO to be alternate functuin input -> Floating Input
	GPIO_PinConfig_t Pin_Cnfg;
	Pin_Cnfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	891b      	ldrh	r3, [r3, #8]
 8000948:	813b      	strh	r3, [r7, #8]
	Pin_Cnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800094a:	2301      	movs	r3, #1
 800094c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &Pin_Cnfg);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f107 0208 	add.w	r2, r7, #8
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe59 	bl	8000610 <MCAL_GPIO_Init>

	//================================

	//2-UPDATE AFIO to Route between EXTI Line with Port A,B,C,D
	uint8_t AFIO_ExTICR_index =  	( EXTI_Config->EXTI_PIN.EXTI_InputLineNumber/4 );
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	b29b      	uxth	r3, r3
 8000966:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_ExTICR_position =  ( EXTI_Config->EXTI_PIN.EXTI_InputLineNumber %4 ) * 4;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	73bb      	strb	r3, [r7, #14]
//	001: PB[x] pin
//	002: PC[x] pin
//	003: PD[x] pin

	// clear the four bit
	AFIO->EXTICR[AFIO_ExTICR_index] &= ~(0xf<<AFIO_ExTICR_position);
 8000978:	4a5f      	ldr	r2, [pc, #380]	; (8000af8 <Update_EXTI+0x1bc>)
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	3302      	adds	r3, #2
 800097e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	210f      	movs	r1, #15
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	495a      	ldr	r1, [pc, #360]	; (8000af8 <Update_EXTI+0x1bc>)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	4002      	ands	r2, r0
 8000994:	3302      	adds	r3, #2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_ExTICR_index] |=  ( ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)) &0xf) <<AFIO_ExTICR_position);
 800099a:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <Update_EXTI+0x1bc>)
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	3302      	adds	r3, #2
 80009a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4954      	ldr	r1, [pc, #336]	; (8000afc <Update_EXTI+0x1c0>)
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d016      	beq.n	80009dc <Update_EXTI+0xa0>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	4953      	ldr	r1, [pc, #332]	; (8000b00 <Update_EXTI+0x1c4>)
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d00f      	beq.n	80009d8 <Update_EXTI+0x9c>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4951      	ldr	r1, [pc, #324]	; (8000b04 <Update_EXTI+0x1c8>)
 80009be:	428b      	cmp	r3, r1
 80009c0:	d008      	beq.n	80009d4 <Update_EXTI+0x98>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4950      	ldr	r1, [pc, #320]	; (8000b08 <Update_EXTI+0x1cc>)
 80009c8:	428b      	cmp	r3, r1
 80009ca:	d101      	bne.n	80009d0 <Update_EXTI+0x94>
 80009cc:	2303      	movs	r3, #3
 80009ce:	e006      	b.n	80009de <Update_EXTI+0xa2>
 80009d0:	2300      	movs	r3, #0
 80009d2:	e004      	b.n	80009de <Update_EXTI+0xa2>
 80009d4:	2302      	movs	r3, #2
 80009d6:	e002      	b.n	80009de <Update_EXTI+0xa2>
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <Update_EXTI+0xa2>
 80009dc:	2300      	movs	r3, #0
 80009de:	7bb9      	ldrb	r1, [r7, #14]
 80009e0:	408b      	lsls	r3, r1
 80009e2:	4618      	mov	r0, r3
 80009e4:	4944      	ldr	r1, [pc, #272]	; (8000af8 <Update_EXTI+0x1bc>)
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	4302      	orrs	r2, r0
 80009ea:	3302      	adds	r3, #2
 80009ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=====================================

	//3- EXTI configuration
	//update rising and fallinf edge

	EXTI->FTSR &= ~( 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <Update_EXTI+0x1d0>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	8812      	ldrh	r2, [r2, #0]
 80009f8:	4611      	mov	r1, r2
 80009fa:	2201      	movs	r2, #1
 80009fc:	408a      	lsls	r2, r1
 80009fe:	43d2      	mvns	r2, r2
 8000a00:	4611      	mov	r1, r2
 8000a02:	4a42      	ldr	r2, [pc, #264]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a04:	400b      	ands	r3, r1
 8000a06:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~( 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	8812      	ldrh	r2, [r2, #0]
 8000a10:	4611      	mov	r1, r2
 8000a12:	2201      	movs	r2, #1
 8000a14:	408a      	lsls	r2, r1
 8000a16:	43d2      	mvns	r2, r2
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a1c:	400b      	ands	r3, r1
 8000a1e:	6093      	str	r3, [r2, #8]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7b1b      	ldrb	r3, [r3, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10b      	bne.n	8000a40 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= ( 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	8812      	ldrh	r2, [r2, #0]
 8000a30:	4611      	mov	r1, r2
 8000a32:	2201      	movs	r2, #1
 8000a34:	408a      	lsls	r2, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	4a34      	ldr	r2, [pc, #208]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	6093      	str	r3, [r2, #8]
 8000a3e:	e029      	b.n	8000a94 <Update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING )
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7b1b      	ldrb	r3, [r3, #12]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10b      	bne.n	8000a60 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= ( 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	8812      	ldrh	r2, [r2, #0]
 8000a50:	4611      	mov	r1, r2
 8000a52:	2201      	movs	r2, #1
 8000a54:	408a      	lsls	r2, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	60d3      	str	r3, [r2, #12]
 8000a5e:	e019      	b.n	8000a94 <Update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7b1b      	ldrb	r3, [r3, #12]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d115      	bne.n	8000a94 <Update_EXTI+0x158>
	{
		EXTI->FTSR |= ( 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	8812      	ldrh	r2, [r2, #0]
 8000a70:	4611      	mov	r1, r2
 8000a72:	2201      	movs	r2, #1
 8000a74:	408a      	lsls	r2, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a24      	ldr	r2, [pc, #144]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= ( 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	8812      	ldrh	r2, [r2, #0]
 8000a86:	4611      	mov	r1, r2
 8000a88:	2201      	movs	r2, #1
 8000a8a:	408a      	lsls	r2, r1
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <Update_EXTI+0x1d0>)
 8000a90:	430b      	orrs	r3, r1
 8000a92:	6093      	str	r3, [r2, #8]
	}

//=========================================================
	//4-Update IRQ Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->p_IRQ_CallBack;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <Update_EXTI+0x1d4>)
 8000aa0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

   //Enable_Disable IRQ EXTI && NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7b5b      	ldrb	r3, [r3, #13]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d110      	bne.n	8000ace <Update_EXTI+0x192>
	{
		EXTI->IMR |=(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <Update_EXTI+0x1d0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	408a      	lsls	r2, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <Update_EXTI+0x1d0>)
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe6c 	bl	80007a4 <Enable_NVIC>
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}

	//
}
 8000acc:	e010      	b.n	8000af0 <Update_EXTI+0x1b4>
		EXTI->IMR &=~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <Update_EXTI+0x1d0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	8812      	ldrh	r2, [r2, #0]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	2201      	movs	r2, #1
 8000ada:	408a      	lsls	r2, r1
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <Update_EXTI+0x1d0>)
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fec0 	bl	8000870 <Disable_NVIC>
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40010800 	.word	0x40010800
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40011400 	.word	0x40011400
 8000b0c:	40010400 	.word	0x40010400
 8000b10:	20000024 	.word	0x20000024

08000b14 <MCAL_EXTI_GPIO_Init>:
* @param [in] 			- EXTI_Config : set by the refrence @ref EXTI_define  EXTI_Trigger_define and  EXTI_IRQ_define
* @retval 				- none
* Note					- Mandatory to Enable RCC clock for AFIO and the corresponding GPIO
*/
/**================================================================*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	Update_EXTI(EXTI_Config);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff0d 	bl	800093c <Update_EXTI>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <EXTI0_IRQHandler>:
 * 							ISR FUNCTION
 * ==========================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<0;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <EXTI0_IRQHandler+0x1c>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <EXTI0_IRQHandler+0x1c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <EXTI0_IRQHandler+0x20>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4798      	blx	r3
	}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010400 	.word	0x40010400
 8000b4c:	20000024 	.word	0x20000024

08000b50 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<1;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <EXTI1_IRQHandler+0x1c>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <EXTI1_IRQHandler+0x1c>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[1]();
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <EXTI1_IRQHandler+0x20>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4798      	blx	r3
	}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400
 8000b70:	20000024 	.word	0x20000024

08000b74 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<2;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <EXTI2_IRQHandler+0x1c>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <EXTI2_IRQHandler+0x1c>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[2]();
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <EXTI2_IRQHandler+0x20>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4798      	blx	r3
	}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010400 	.word	0x40010400
 8000b94:	20000024 	.word	0x20000024

08000b98 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<3;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <EXTI3_IRQHandler+0x1c>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <EXTI3_IRQHandler+0x1c>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[3]();
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <EXTI3_IRQHandler+0x20>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4798      	blx	r3
	}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010400 	.word	0x40010400
 8000bb8:	20000024 	.word	0x20000024

08000bbc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	// clear Pending register
	EXTI->PR |= 1<<4;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <EXTI4_IRQHandler+0x1c>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <EXTI4_IRQHandler+0x1c>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <EXTI4_IRQHandler+0x20>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4798      	blx	r3
	}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010400 	.word	0x40010400
 8000bdc:	20000024 	.word	0x20000024

08000be0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )  { EXTI->PR |= 1<<5;     GP_IRQ_CallBack[5](); }
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d008      	beq.n	8000c02 <EXTI9_5_IRQHandler+0x22>
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	6153      	str	r3, [r2, #20]
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <EXTI9_5_IRQHandler+0xa4>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )  { EXTI->PR |= 1<<6;     GP_IRQ_CallBack[6](); }
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d008      	beq.n	8000c20 <EXTI9_5_IRQHandler+0x40>
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <EXTI9_5_IRQHandler+0xa4>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4798      	blx	r3
	if(EXTI->PR & 1<<7 )  { EXTI->PR |= 1<<7;     GP_IRQ_CallBack[7](); }
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d008      	beq.n	8000c3e <EXTI9_5_IRQHandler+0x5e>
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c36:	6153      	str	r3, [r2, #20]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <EXTI9_5_IRQHandler+0xa4>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )  { EXTI->PR |= 1<<8;     GP_IRQ_CallBack[8](); }
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d008      	beq.n	8000c5c <EXTI9_5_IRQHandler+0x7c>
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <EXTI9_5_IRQHandler+0xa4>)
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )  { EXTI->PR |= 1<<9;     GP_IRQ_CallBack[9](); }
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d008      	beq.n	8000c7a <EXTI9_5_IRQHandler+0x9a>
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <EXTI9_5_IRQHandler+0xa0>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6153      	str	r3, [r2, #20]
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <EXTI9_5_IRQHandler+0xa4>)
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	4798      	blx	r3
	}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010400 	.word	0x40010400
 8000c84:	20000024 	.word	0x20000024

08000c88 <__libc_init_array>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	4e0c      	ldr	r6, [pc, #48]	; (8000cc0 <__libc_init_array+0x38>)
 8000c8e:	4c0d      	ldr	r4, [pc, #52]	; (8000cc4 <__libc_init_array+0x3c>)
 8000c90:	1ba4      	subs	r4, r4, r6
 8000c92:	10a4      	asrs	r4, r4, #2
 8000c94:	42a5      	cmp	r5, r4
 8000c96:	d109      	bne.n	8000cac <__libc_init_array+0x24>
 8000c98:	f000 f81a 	bl	8000cd0 <_init>
 8000c9c:	2500      	movs	r5, #0
 8000c9e:	4e0a      	ldr	r6, [pc, #40]	; (8000cc8 <__libc_init_array+0x40>)
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <__libc_init_array+0x44>)
 8000ca2:	1ba4      	subs	r4, r4, r6
 8000ca4:	10a4      	asrs	r4, r4, #2
 8000ca6:	42a5      	cmp	r5, r4
 8000ca8:	d105      	bne.n	8000cb6 <__libc_init_array+0x2e>
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb0:	4798      	blx	r3
 8000cb2:	3501      	adds	r5, #1
 8000cb4:	e7ee      	b.n	8000c94 <__libc_init_array+0xc>
 8000cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cba:	4798      	blx	r3
 8000cbc:	3501      	adds	r5, #1
 8000cbe:	e7f2      	b.n	8000ca6 <__libc_init_array+0x1e>
 8000cc0:	08000d0c 	.word	0x08000d0c
 8000cc4:	08000d0c 	.word	0x08000d0c
 8000cc8:	08000d0c 	.word	0x08000d0c
 8000ccc:	08000d10 	.word	0x08000d10

08000cd0 <_init>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	bf00      	nop
 8000cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd6:	bc08      	pop	{r3}
 8000cd8:	469e      	mov	lr, r3
 8000cda:	4770      	bx	lr

08000cdc <_fini>:
 8000cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cde:	bf00      	nop
 8000ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce2:	bc08      	pop	{r3}
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	4770      	bx	lr
